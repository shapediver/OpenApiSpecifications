openapi: 3.0.3

info:
  title: Geometry Backend API v2
  description: |-
    The ShapeDiver Geometry Backend system is used to:
    * host Grasshopper models in a secure, reliable, scalable, and performant way,
    * run computations of Grasshopper models,
    * and cache and output the results of computations and exports.
  version: 1.8.0

externalDocs:
  description: ShapeDiver Help Center
  url: https://help.shapediver.com/doc/

tags:
  - name: analytics
  - name: ar-scene
  - name: assets
  - name: auth
  - name: auth-group
  - name: export
    externalDocs:
      url: https://help.shapediver.com/doc/exports-on-the-api
  - name: file
  - name: gltf
  - name: log
  - name: model
  - name: model-state
  - name: output
    externalDocs:
      url: https://help.shapediver.com/doc/outputs-on-the-api
  - name: script
  - name: sdtf
    externalDocs:
      url: https://help.shapediver.com/doc/sdtf-structured-data-transfer-format
  - name: session
    externalDocs:
      url: https://help.shapediver.com/doc/sessions-and-their-lifetime
  - name: system
  - name: texture

###############################################################################
# Components                                                                  #
###############################################################################
components:
  schemas:
    #-------------------------------------------------------------------------#
    #- Custom data types                                                     -#
    #-------------------------------------------------------------------------#
    AnyDateTime:
      # Cannot combine the other types since string pattern matching within `oneOf` is not
      # supported by all generators.
      # TODO: Check again in OAS 3.1!
      description: >-
        An ISO-8601 (partial) date with an optional (partial) timestamp, in numeric format.

        Formats:
          * YYYY
          * YYYYMM
          * YYYYMMDD
          * YYYYMMDDhh
          * YYYYMMDDhhmm
          * YYYYMMDDhhmmss
          * YYYYMMDDhhmmsszzz
      type: string
      pattern: '^(\d{4}|\d{6}|\d{8}|\d{10}|\d{12}|\d{14}|\d{17})$'
      example: 20240521
    AnyDateExtended:
      # Cannot combine the other types since string pattern matching within `oneOf` is not
      # supported by all generators.
      # TODO: Check again in OAS 3.1!
      description: >-
        An ISO-8601 (partial) date with an optional hour timestamp, in numeric format.

        Formats:
          * YYYY
          * YYYYMM
          * YYYYMMDD
          * YYYYMMDDhh
      type: string
      pattern: '^(\d{4}|\d{6}|\d{8}|\d{10})$'
      example: 20240521
    Base64Data:
      type: string
      format: byte
    FullDate:
      description: |-
        An ISO-8601 date, in numeric format.

        Format: YYYYMMDD
      type: string
      pattern: '^\d{8}$'
      example: 20240521
    DateHour:
      description: |-
        An ISO-8601 date with hours, in numeric format.

        Format: YYYYMMDDhh
      type: string
      pattern: '^\d{10}$'
      example: 2024052114
    DateHourMinute:
      description: |-
        An ISO-8601 date with hours and minutes, in numeric format.

        Format: YYYYMMDDhhmm
      type: string
      pattern: '^\d{12}$'
      example: 202405211407
    DateTime:
      description: |-
        An ISO-8601 date-time without milliseconds, in numeric format.

        Format: YYYYMMDDhhmmss
      type: string
      pattern: '^\d{14}$'
      example: 20240521140735
    DateTimeMs:
      description: |-
        A ISO-8601 date-time, in numeric format.

        Format: YYYYMMDDhhmmsszzz
      type: string
      pattern: '^\d{17}$'
      example: 20240521140735123
    DateTimeIso:
      description: |-
        A ISO-8601 date-time.

        Format: YYYY-MM-DDThh:mm:ss.zzzZ
      type: string
      pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$'
      example: 2024-05-21T14:07:35.123Z
    Epoch:
      description: A Unix timestamp in seconds.
      type: string
      pattern: '^\d{10}$'
      example: 1708585395
    EpochMs:
      description: A Unix timestamp in milliseconds.
      type: string
      pattern: '^\d{13}$'
      example: 1708585395633
    NullObj:
      description: A substitution for the JSON-value `null`.
      type: object
      properties:
        nullObj:
          description: The value of this property does not matter.
          type: boolean
      required:
        - nullObj
      nullable: true
    OctetStream:
      type: string
      format: binary
    Uuid:
      description: A UUID v4.
      type: string
      format: uuid
      example: "bd725508-176a-11ef-9196-bf06f0e99bb4"
    Year:
      description: |-
        An ISO-8601 year.

        Format: YYYY
      type: string
      pattern: '^\d{4}$'
      example: 2024
    YearMonth:
      description: |-
        An IOS-8601 date with years and months, in numeric format.

        Format: YYYYMM
      type: string
      pattern: '^\d{6}$'
      example: 202405

    #-------------------------------------------------------------------------#
    #- Composite custom data types                                           -#
    #-------------------------------------------------------------------------#
    AnyValue:
      description: Can be any value - string, number, boolean, array or object.
      anyOf:
        - type: string
        - type: number
        - type: integer
        - type: boolean
        - type: array
          items: {}
        - type: object

    #-------------------------------------------------------------------------#
    #- Common data structures                                                -#
    #-------------------------------------------------------------------------#
    CommonsComputationStatus: &CommonsComputationStatus
      description: Status of a model computation.
      type: string
      enum:
        - success
        - timeout
        - checkconfirmed
        - checkdenied
        - checkpending
        - maxcombinedassetsizeexceeded
        - maxdbsizeperoutputexceeded
        - maxpartsperoutputexceeded
        - maxassetpartsperoutputexceeded
        - maxtransformationsperoutputexceeded
        - maxpartsexceeded
        - maxassetpartsexceeded
        - recoverableerror
        - unrecoverableerror
        - nooutputdatafordefaultparametervalues
        - modelwithoutgeometryoutput
        - unknown
      x-enum-varnames:
        - SUCCESS
        - TIMEOUT
        - CHECK_CONFIRMED
        - CHECK_DENIED
        - CHECK_PENDING
        - MAX_COMBINED_ASSET_SIZE_EXCEEDED
        - MAX_DB_SIZE_PER_OUTPUT_EXCEEDED
        - MAX_PARTS_PER_OUTPUT_EXCEEDED
        - MAX_ASSET_PARTS_PER_OUTPUT_EXCEEDED
        - MAX_TRANSFORMATIONS_PER_OUTPUT_EXCEEDED
        - MAX_PARTS_EXCEEDED
        - MAX_ASSET_PARTS_EXCEEDED
        - RECOVERABLE_ERROR
        - UNRECOVERABLE_ERROR
        - NO_OUTPUT_DATA_FOR_DEFAULT_PARAMETER_VALUES
        - MODEL_WITHOUT_GEOMETRY_OUTPUT
        - UNKNOWN
    CommonsGroup:
      description: Group of a parameter, export or output.
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    CommonsModelBlockingReasons: &CommonsModelBlockingReasons
      description: Reasons why the model may be blocked.
      type: object
      properties:
        creditLimit:
          description: The model owner's credit limit has been exceeded.
          type: boolean
        owner:
          description: The model has been blocked explicitly by its owner.
          type: boolean
    CommonsModelStatus: &CommonsModelStatus
      description: Status of a model.
      type: string
      enum:
        - unknown
        - not_uploaded
        - uploaded
        - pending
        - confirmed
        - denied
        - deleted
      x-enum-varnames:
        - UNKNOWN
        - NOT_UPLOADED
        - UPLOADED
        - PENDING
        - CONFIRMED
        - DENIED
        - DELETED
    CommonsBasicParameter: &CommonsBasicParameter
      description: Definition of a basic ShapeDiver parameter.
      oneOf:
        - type: string
        - type: number
        - type: boolean
    CommonsStypeParameter: &CommonsStypeParameter
      description: Definition of the value to use for s-type parameters.
      type: object
      properties:
        value:
          description: Optional embedded value. If this is set the asset is ignored.
          type: string
        asset:
          title: CommmonsParameterAsset
          description: Reference to the s-type parameter asset to be used.
          type: object
          properties:
            id:
              description: String ID of the asset.
              type: string
            chunk:
              title: CommonsParameterChunk
              description: >-
                Describing which chunk of the s-type asset to use. When not specified, the
                chunk of an asset gets chosen based on parameter ID and name.
              type: object
              properties:
                id:
                  description: ID of the chunk to be used.
                  type: string
                name:
                  description: Name attribute of the chunk to be used.
                  type: string
          required:
            - id
    CommonsTicket:
      description: Authorization ticket.
      type: object
      properties:
        accessdomains:
          description: List of domains (origins) this ticket should be limited to; may be empty.
          type: array
          items:
            type: string
        author:
          description: >-
            Should this ticket provide access to model authoring (allows to change configuration)?
          type: boolean
        pub:
          description: >-
            Should this ticket allow public access (ignore the model's `accessdomains` property)?
          type: boolean
        until:
          description: The timestamp until which the ticket should be valid.
          allOf:
            - $ref: "#/components/schemas/DateTime"
        use_id2:
          description: >-
            Does this ticket identify the model via its secondary ID (model property `id2`)?
          type: boolean
      required:
        - pub
        - until
    CommonsTicketType: &CommonsTicketType
      description: Type of a ticket.
      type: string
      enum: [backend, ""]
      x-enum-varnames: [BACKEND, NONE]

    #-------------------------------------------------------------------------#
    #- Query types                                                           -#
    #-------------------------------------------------------------------------#
    QueryComputationStatisticsStatus:
      description: Filter by model computation statistics status.
      type: string
      enum:
        - success
        - timeout
        - other
        - "*"
      x-enum-varnames:
        - SUCCESS
        - TIMEOUT
        - OTHER
        - ALL
    QueryComputationStatus:
      <<: *CommonsComputationStatus
      description: Filter by model computation status.
    QueryComputationType:
      description: Filter by computation type.
      type: string
      enum:
        - computation
        - export
        - load
        - "*"
      x-enum-varnames:
        - COMPUTATION
        - EXPORT
        - LOAD
        - ALL
    QueryGltfConversion:
      description: |-
        Conversion type of a glTF upoad:
        * `none`: no further processing of the file.
        * `usdz`: converts the glTF into the USDZ format.
        * `scene`: creates a temporary AR scene that holds both, a glTF and a USDZ file.
      type: string
      enum: [none, scene, usdz]
      x-enum-varnames: [NONE, SCENE, USDZ]
    QueryModelStatus:
      <<: *CommonsModelStatus
      description: Filter by model status.
    QueryOrder:
      description: Specifies the order of the results.
      type: string
      enum: [asc, desc]
      x-enum-varnames: [ASC, DESC]

    #-------------------------------------------------------------------------#
    #- Request data structures                                               -#
    #-------------------------------------------------------------------------#
    ReqGroup:
      description: Group information.
      allOf:
        - $ref: "#/components/schemas/CommonsGroup"
    ReqTicket:
      description: Body of a ticket request.
      allOf:
        - $ref: "#/components/schemas/CommonsTicket"
        - type: object
          properties:
            type:
              $ref: "#/components/schemas/ReqTicketType"
          required:
            - type
    ReqTicketType:
      <<: *CommonsTicketType
      description: The type of the ticket.
    ReqConfigure:
      description: |-
        Body of a configure request.

        A dictionary of string keys and values of any type.
      type: object
      additionalProperties: true
    ReqLogLevel:
      description: Log message level for log requests.
      type: string
      enum: [0, 1, 2]
      x-enum-varnames: [INFO, WARN, ERROR]
    ReqLogMessage:
      description: Body of a log message request.
      type: object
      properties:
        level:
          $ref: "#/components/schemas/ReqLogLevel"
        message:
          description: The message that should be logged.
          type: string
      required:
        - level
        - message
    ReqAuthorizationGroup:
      description: Body of an authorization group request.
      type: object
      properties:
        models:
          description: The model IDs that should form the new authorization group.
          type: array
          items:
            $ref: "#/components/schemas/Uuid"
        users:
          description: The user IDs that should form the new authorization group.
          type: array
          items:
            $ref: "#/components/schemas/Uuid"
        organizations:
          description: The organization IDs that should form the new authorization group.
          type: array
          items:
            $ref: "#/components/schemas/Uuid"
    ReqModelStatistics:
      description: >-
        Body of a model statistics request. Every request-item results in exactly one
        response-item, whereby the order of response-items corresponds to the order of the
        request-items.
      type: object
      properties:
        parameters:
          type: array
          items:
            title: ReqModelStatistic
            description: >-
              Parameters of a single model-session analytics request. When multiple model IDs or
              timestamps are requested, the resulting response-item represents an aggregation of
              the requested data.
            type: object
            properties:
              modelid:
                type: array
                items:
                  $ref: "#/components/schemas/Uuid"
              timestamp:
                description: >-
                  Either a single extended date or an array of extended dates.

                  Multiple timestamps are aggregated and result in a single statistic object.
                type: array
                items:
                  $ref: "#/components/schemas/AnyDateExtended"
              timestamp_from:
                description: >-
                  Allows to define the beginning of a time range, instead of specifying individual
                  timestamps.
                allOf:
                  - $ref: "#/components/schemas/AnyDateExtended"
              timestamp_to:
                description: >-
                  Allows to define the ending of a time range, instead of specifying individual
                  timestamps.
                allOf:
                  - $ref: "#/components/schemas/AnyDateExtended"
            required:
              - modelid
      required:
        - parameters
    ReqAnyCreditMetricId:
      description: >-
        Either a single or multiple IDs. Multiple IDs are aggregated and result in a single credit
        metrics object.
      oneOf:
        - title: ReqModelCreditMetricId
          description: Model metrics
          type: object
          properties:
            modelIds:
              type: array
              items:
                $ref: "#/components/schemas/Uuid"
          required:
            - modelIds
        - title: ReqUserCreditMetricId
          description: User metrics
          type: object
          properties:
            userIds:
              type: array
              items:
                $ref: "#/components/schemas/Uuid"
          required:
            - userIds
        - title: ReqOrganizationCreditMetricId
          description: Organization metrics
          type: object
          properties:
            orgIds:
              type: array
              items:
                $ref: "#/components/schemas/Uuid"
          required:
            - orgIds
        - title: ReqSystemCreditMetricId
          description: System-wide metrics
          type: object
          properties:
            systems:
              type: boolean
          required:
            - systems
        - title: ReqModelUserCreditMetricId
          description: Model-User metrics
          type: object
          properties:
            modelIds:
              type: array
              items:
                $ref: "#/components/schemas/Uuid"
            userIds:
              type: array
              items:
                $ref: "#/components/schemas/Uuid"
          required:
            - modelIds
            - userIds
        - title: ReqModelOrganizationCreditMetricId
          description: Model-Organization metrics
          type: object
          properties:
            modelIds:
              type: array
              items:
                $ref: "#/components/schemas/Uuid"
            orgIds:
              type: array
              items:
                $ref: "#/components/schemas/Uuid"
          required:
            - modelIds
            - orgIds
    ReqCreditMetrics:
      description: >-
        Body of a credit metrics request. Every request-item results in exactly one response-item,
        whereby the order of response-items corresponds to the order of the request-items.
      type: object
      properties:
        parameters:
          type: array
          items:
            title: ReqCreditMetric
            description: >-
              Parameters of a credit metrics request. When IDs or timestamps are requested, the
              resulting response-item represents an aggregation of the requested data.
            type: object
            properties:
              id:
                $ref: "#/components/schemas/ReqAnyCreditMetricId"
              timestamp:
                description: >-
                  Either a single extended date or an array of extended dates.

                  Multiple timestamps are aggregated and result in a single credit metrics object.
                type: array
                items:
                  $ref: "#/components/schemas/AnyDateExtended"
              timestamp_from:
                description: >-
                  Allows to define the beginning of a time range, instead of specifying individual
                  timestamps.
                allOf:
                  - $ref: "#/components/schemas/AnyDateExtended"
              timestamp_to:
                description: >-
                  Allows to define the ending of a time range, instead of specifying individual
                  timestamps.
                allOf:
                  - $ref: "#/components/schemas/AnyDateExtended"
            required:
              - id
      required:
        - parameters
    ReqBasicParameter:
      <<: *CommonsBasicParameter
    ReqStypeParameter:
      <<: *CommonsStypeParameter
    ReqParameterValue:
      description: The value of a single model parameter.
      oneOf:
        - $ref: "#/components/schemas/ReqBasicParameter"
        - $ref: "#/components/schemas/ReqStypeParameter"
    ReqCustomization:
      description: |-
        A directory of parameter keys and values.

        Supported parameter keys are as follows, whereby the parameter resolution is done in the
        same order as the keys are listed:
        * `id`
        * `name`
        * `displayname`

        Supported parameter values are:
        * Basic parameter (`ReqBasicParameter`)
        * S-type parameter (`ReqStypeParameter`)
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ReqParameterValue"
    ReqExport:
      description: Body of an export request.
      type: object
      properties:
        parameters:
          $ref: "#/components/schemas/ReqCustomization"
        exports:
          type: array
          items:
            type: string
        outputs:
          type: array
          items:
            type: string
        max_wait_time:
          description: >-
            Maximum amount of milliseconds to wait for completion of export request before
            responding.
          type: integer
          minimum: 0
      required:
        - parameters
        - exports
    ReqExportDefinitions:
      description: Definition of a exports. A directory of export-IDs and export-definitions.
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ReqExportDefinition"
    ReqExportDefinition:
      description: Data for a single export definition.
      type: object
      properties:
        displayname:
          description: Parameter name to display instead of _name_.
          type: string
        group:
          title: ReqExportDefinitionGroup
          description: >-
            Set to `null` or `NullObj` to remove the export from the currently assigned group.
          oneOf:
            - $ref: "#/components/schemas/ReqGroup"
            - $ref: "#/components/schemas/NullObj"
        hidden:
          description: Controls whether the export should be hidden in the UI.
          type: boolean
        order:
          description: Ordering of the export in client applications.
          type: integer
        tooltip:
          description: Description that is shown as a tooltip in the clients.
          type: string
    ReqOutputDefinitions:
      description: Definition of outputs. A directory of output-IDs and output-definitions.
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ReqOutputDefinition"
    ReqOutputDefinition:
      description: Data for a single output definition.
      type: object
      properties:
        displayname:
          description: Parameter name to display instead of `name`.
          type: string
        group:
          title: ReqOutputDefinitionGroup
          description: >-
            Set to `null` or `NullObj` to remove the export from the currently assigned group.
          oneOf:
            - $ref: "#/components/schemas/ReqGroup"
            - $ref: "#/components/schemas/NullObj"
        hidden:
          description: Controls whether the output should be hidden in the UI.
          type: boolean
        order:
          description: Ordering of the output in client applications.
          type: integer
        tooltip:
          description: Description that is shown as a tooltip in the clients.
          type: string
        chunks:
          description: >-
            The chunk definitions of the sdTF file that is generated by the output. If specified,
            all existing sdTF chunks of the output must be given. The order of the given chunk
            items determines the order in that the chunks will be shown in the UI.
          type: array
          items:
            title: ReqOutputDefinitionChunk
            description: >-
              Definition of a single "chunk" of data in an sdTF file that is generated by the
              output component.
            type: object
            properties:
              id:
                description: ID of the chunk.
                type: string
              displayname:
                description: >-
                  Chunk name to display instead of the chunk `name`. This value can be unset by
                  specifying an empty string.
                type: string
              hidden:
                description: Controls whether the chunk should be hidden in the UI.
                type: boolean
            required:
              - id
    ReqCache:
      description: >-
        Body of an export or output cache request. A directory of export-/output-IDs and
        version-IDs.
      type: object
      additionalProperties:
        type: string
      example:
        "96ce38f8-e197-416a-b78b-18d8376f5903": "62b3e13f-7b78-4a59-86f9-4a51f83feb21"
    ReqExportOrCache:
      description: Either a cache or an export request.
      oneOf:
        - $ref: "#/components/schemas/ReqCache"
        - $ref: "#/components/schemas/ReqExport"
    ReqCustomizationOrCache:
      description: Either a cache or a customization request.
      oneOf:
        - $ref: "#/components/schemas/ReqCache"
        - $ref: "#/components/schemas/ReqCustomization"
    ReqCustomizationOrExport:
      oneOf:
        - $ref: "#/components/schemas/ReqCustomization"
        - $ref: "#/components/schemas/ReqExport"
    ReqModelState:
      description: Description of a Model-State.
      type: object
      properties:
        parameters:
          $ref: "#/components/schemas/ReqCustomization"
        data:
          description: Optional untyped data that can be used to store additional information.
          type: object
          additionalProperties: true
        image:
          description: >-
            Details of the Model-State image file. If provided, the response will include a URL
            for uploading the file.
          allOf:
            - $ref: "#/components/schemas/ReqFileDefinition"
        arSceneId:
          description: >-
            The ID of an existing AR scene associated with this model. If provided, the scene's
            glTF and USDZ data will be duplicated into the newly created Model-State.
          type: string
      required:
        - parameters
    ReqModelFileType:
      description: Supported Grasshopper file types for models.
      type: string
      enum: [gh, ghx]
      x-enum-varnames: [GRASSHOPPER_BINARY, GRASSHOPPER_XML]
    ReqTrustLevel:
      description: Level of trust granted for a model.
      type: string
      enum: ["", none, full]
      x-enum-varnames: [UNDEFINED, NONE, FULL]
    ReqModel:
      description: Body of a template request.
      type: object
      properties:
        accessdomains:
          description: >-
            List of domains (origins) this model is limited to (is ignored in case `pub` is true).
          type: array
          items:
            type: string
        allowed_libraries:
          description: List of allowed Grasshopper libraries.
          type: array
          items:
            type: string
        auth_groups:
          description: List of allowed auth-groups.
          type: array
          items:
            $ref: "#/components/schemas/Uuid"
        backendaccess:
          description: Should backend access to the model be allowed.
          type: boolean
        blockingReasons:
          title: ReqModelBlockingReasons
          <<: *CommonsModelBlockingReasons
        filename:
          description: Original name of the model's grasshopper file.
          type: string
        ftype:
          description: File type of the model.
          allOf:
            - $ref: "#/components/schemas/ReqModelFileType"
        initial_warmup:
          description: >-
            Allows to control whether the model should be warmed up immediately after loading by
            running a computation. This increases the likelihood of following computation requests
            to be faster.
          type: boolean
        id2:
          description: Optional second model ID.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        max_comp_time:
          description: Maximum number of milliseconds allowed for computations of this model.
          type: integer
          minimum: 0
        max_export_size:
          description: >-
            Maximum number of bytes allowed to be exported from a model for a specific set of
            parameter values.
          type: integer
          minimum: 0
        max_idle_minutes:
          description: |-
            Maximum amount of minutes a loaded model may be unused before it gets unloaded.

            Note: Models may get unloaded earlier than that.
          type: integer
          minimum: 0
        max_model_size:
          description: Maximum number of bytes allowed for the model's Grasshopper file size.
          type: integer
          minimum: 0
        max_output_size:
          description: >-
            Maximum number of bytes allowed for an output of a model for a specific set of
            parameter values.
          type: integer
          minimum: 0
        max_texture_size:
          description: >-
            Allows to configure the maximum number of bytes allowed for a single texture.
          type: integer
          minimum: 0
        max_wait_time:
          description: >-
            Maximum time a computation request may stay waiting before a further worker goes ahead
            regardless of whether it already has the model loaded, and regardless of
            `num_loaded_max`. This allows to configure a soft or a hard upper boundary for the
            number of loaded models.
          type: integer
          minimum: 0
        name:
          description: Name of the model.
          type: string
        num_loaded_max:
          description: >-
            Maximum number of workers that should have the model loaded at the same time.
          type: integer
          minimum: 0
        num_loaded_min:
          description: >-
            Minimum number of workers which should have the model loaded once a session to the
            model gets opened.
          type: integer
          minimum: 0
        num_preloaded_min:
          description: >-
            Minimum number of workers that should always have the model loaded, regardless of
            session activity. This allows to minimise the likelihood of computation requests being
            slower due to model loading.
          type: integer
          minimum: 0
        org_id:
          description: Optional organization ID.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        prev_id:
          description: Model ID of this model's previous version.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        pub:
          description: Allows public access (ignore `accessdomains`).
          type: boolean
        require_iframe:
          description: Enforces iframe embedding instead of direct embedding.
          type: boolean
        require_token:
          description: Enforces token-based authentication for this model.
          type: boolean
        session_rate_limit:
          description: >-
            Limits the number of sessions that can be created by a specific IP address in one hour.
          type: integer
          minimum: 0
        trust:
          description: >-
            Can this model be trusted (controls whether failed computations will be retried).
          allOf:
            - $ref: "#/components/schemas/ReqTrustLevel"
        use_cdn:
          description: Allows the usage of the CDN for fast content distribution.
          type: boolean
        user_id:
          description: Optional user ID.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        webhook_url:
          description: >-
            The webhook-url for updating the platform backend about model status changes.
          type: string
        webhook_token:
          description: The webhook-token for authentication used by the webhook-url.
          type: string
        deny_scripts:
          description: Allows to control whether the model's Grasshopper file can contain scripts.
          type: boolean
    ReqParameterDefinitions:
      description: >-
        Definition of model parameters. A directory of parameter-IDs and parameter-definitions.
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ReqParameterDefinition"
    ReqParameterDefinition:
      description: Data for a single parameter definition.
      type: object
      properties:
        displayname:
          description: Parameter name to display instead of `name`.
          type: string
        group:
          title: ReqParameterDefinitionGroup
          description: >-
            Set to `null` or `NullObj` to remove the export from the currently assigned group.
          oneOf:
            - $ref: "#/components/schemas/ReqGroup"
            - $ref: "#/components/schemas/NullObj"
        hidden:
          description: Controls whether the parameter should be hidden in the UI.
          type: boolean
        order:
          description: Ordering of the parameter in client applications.
          type: integer
        tooltip:
          description: Description that is shown as a tooltip in the clients.
          type: string
        settings:
          description: Holds parameter-type specific information.
          type: object
    ReqFileUpload:
      description: >-
        Body of a file upload request. A directory of file-parameter-IDs and upload-definitions.
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ReqFileDefinition"
      example:
        "e6a576af-2e16-43cc-a78f-d74ae1154205":
          format: "image/jpeg"
          size: 1234
    ReqFileDefinition:
      description: Data for a single file parameter.
      type: object
      properties:
        filename:
          description: |-
            Name of the file to be uploaded.

            If this property is set, the file upload request must include a `Content-Disposition`
            HTTP header with the format `attachment; filename="{filename}"`. Failure to do so will
            result in a signature mismatch. For convenience, the response will provide a
            preformatted HTTP header value that can be used directly.
          type: string
        format:
          description: Content-Type (MIME type) of the file to be uploaded.
          type: string
        size:
          description: Size of the file to be uploaded, in bytes.
          type: integer
          minimum: 0
      required:
        - format
        - size
    # TODO: Use when Python fix is done.
    # ReqSdtfUpload:
    #   description: Body of a sdTF upload request.
    #   type: array
    #   items:
    #     $ref: '#/components/schemas/ReqSdtfDefinition'
    ReqSdtfDefinition:
      description: Data for a single sdTF parameter.
      type: object
      properties:
        content_encoding:
          description: Encoding of the sdTF to be uploaded.
          type: string
        content_length:
          description: Size of the sdTF to be uploaded, in bytes.
          type: integer
          minimum: 0
        content_type:
          description: Content-type of the sdTF to be uploaded.
          allOf:
            - $ref: "#/components/schemas/ReqSdtfType"
        namespace:
          description: Namespace the asset shall be created in.
          type: string
      required:
        - content_length
        - content_type
        - namespace
    ReqSdtfType:
      description: Content-Type (MIME type) of the sdTF to be uploaded.
      type: string
      enum: [model/vnd.sdtf]
      x-enum-varnames: [MODEL_SDTF]

    #-------------------------------------------------------------------------#
    #- Response helper data structures                                       -#
    #-------------------------------------------------------------------------#
    # Root response object holding all possible properties.
    ResBase:
      allOf:
        - type: object
          required:
            - version
        - $ref: "#/components/schemas/ResBaseAsset"
        - $ref: "#/components/schemas/ResBaseList"
        - $ref: "#/components/schemas/ResBaseModelState"
        - $ref: "#/components/schemas/ResBaseSystem"
        - $ref: "#/components/schemas/ResPartActions"
        - $ref: "#/components/schemas/ResPartAnalytics"
        - $ref: "#/components/schemas/ResPartAuthorizationGroup"
        - $ref: "#/components/schemas/ResPartCleanup"
        - $ref: "#/components/schemas/ResPartDecryptedTicket"
        - $ref: "#/components/schemas/ResPartExports"
        - $ref: "#/components/schemas/ResPartFile"
        - $ref: "#/components/schemas/ResPartGltfUpload"
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartModel"
        - $ref: "#/components/schemas/ResPartModelComputation"
        - $ref: "#/components/schemas/ResPartOutputs"
        - $ref: "#/components/schemas/ResPartPagination"
        - $ref: "#/components/schemas/ResPartParameters"
        - $ref: "#/components/schemas/ResPartPlugins"
        - $ref: "#/components/schemas/ResPartSessionId"
        - $ref: "#/components/schemas/ResPartSetting"
        - $ref: "#/components/schemas/ResPartStatistic"
        - $ref: "#/components/schemas/ResPartTemplates"
        - $ref: "#/components/schemas/ResPartTicket"
        - $ref: "#/components/schemas/ResPartVersion"
        - $ref: "#/components/schemas/ResPartViewer"
        - $ref: "#/components/schemas/ResPartViewerSettingsVersion"
        - $ref: "#/components/schemas/ResPartWarnings"
    ResBaseAsset:
      type: object
      properties:
        asset:
          $ref: "#/components/schemas/ResAsset"
    ResBaseList:
      type: object
      properties:
        list:
          $ref: "#/components/schemas/ResList"
    ResBaseModelState:
      type: object
      properties:
        modelState:
          title: ResModelStateOrData
          oneOf:
            - $ref: "#/components/schemas/ResModelState"
            - $ref: "#/components/schemas/ResModelStateData"
    ResBaseSystem:
      type: object
      properties:
        system:
          $ref: "#/components/schemas/ResSystem"

    #-------------------------------------------------------------------------#
    #- Main response data structures                                         -#
    #-------------------------------------------------------------------------#
    ResGetModelStatistics:
      allOf:
        - $ref: "#/components/schemas/ResPartAnalytics"
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - analytics
        - version
    ResGetCreditMetrics:
      allOf:
        - $ref: "#/components/schemas/ResPartAnalytics"
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - analytics
        - version
    ResGetUserCreditMetrics:
      allOf:
        - $ref: "#/components/schemas/ResPartAnalytics"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - analytics
        - version
    ResGetOrganizationCreditMetrics:
      allOf:
        - $ref: "#/components/schemas/ResPartAnalytics"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - analytics
        - version
    ResGetModelUserCreditMetrics:
      allOf:
        - $ref: "#/components/schemas/ResPartAnalytics"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - analytics
        - version
    ResGetModelOrganizationCreditMetrics:
      allOf:
        - $ref: "#/components/schemas/ResPartAnalytics"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - analytics
        - version
    ResCreateAuthorizationGroup:
      allOf:
        - $ref: "#/components/schemas/ResPartAuthorizationGroup"
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - auth_group
        - version
    ResComputeExports:
      allOf:
        - $ref: "#/components/schemas/ResPartActions"
        - $ref: "#/components/schemas/ResPartExports"
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartOutputs"
        - $ref: "#/components/schemas/ResPartTemplates"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResGetCachedExports:
      allOf:
        - $ref: "#/components/schemas/ResPartActions"
        - $ref: "#/components/schemas/ResPartExports"
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartOutputs"
        - $ref: "#/components/schemas/ResPartTemplates"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResUpdateExportDefinitions:
      allOf:
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResListExportVersions:
      allOf:
        - title: ResPartList
          type: object
          properties:
            list:
              title: ResExportList
              allOf:
                - $ref: "#/components/schemas/ResList"
                - type: object
                  required:
                    - export
        - $ref: "#/components/schemas/ResPartPagination"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - list
        - pagination
        - version
    ResListFiles:
      allOf:
        - title: ResPartList
          type: object
          properties:
            list:
              title: ResFileList
              allOf:
                - $ref: "#/components/schemas/ResList"
                - type: object
                  required:
                    - file
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartPagination"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - list
        - pagination
        - version
    ResDeleteFile:
      allOf:
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResUploadFile:
      allOf:
        - title: ResPartAsset
          type: object
          properties:
            asset:
              title: ResFileAsset
              description: File assets.
              allOf:
                - $ref: "#/components/schemas/ResAsset"
                - type: object
                  required:
                    - file
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - asset
        - version
    ResUploadGltf:
      allOf:
        - $ref: "#/components/schemas/ResPartGltfUpload"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - gltf
        - version
    ResLogMessage:
      allOf:
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResGetModelConfig:
      allOf:
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartVersion"
        - $ref: "#/components/schemas/ResPartViewer"
      required:
        - version
        - viewer
    ResCreateModelConfig:
      allOf:
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResUpdateModelConfig:
      allOf:
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResListModels:
      allOf:
        - title: ResPartList
          type: object
          properties:
            list:
              title: ResModelList
              allOf:
                - $ref: "#/components/schemas/ResList"
                - type: object
                  required:
                    - model
        - $ref: "#/components/schemas/ResPartPagination"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - list
        - pagination
        - version
    ResGetModel:
      allOf:
        - $ref: "#/components/schemas/ResPartExports"
        - $ref: "#/components/schemas/ResPartFile"
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartModel"
        - $ref: "#/components/schemas/ResPartOutputs"
        - $ref: "#/components/schemas/ResPartParameters"
        - $ref: "#/components/schemas/ResPartPlugins"
        - $ref: "#/components/schemas/ResPartSetting"
        - $ref: "#/components/schemas/ResPartStatistic"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - file
        - model
        - setting
        - statistic
        - version
    ResUpdateModel:
      allOf:
        - $ref: "#/components/schemas/ResPartFile"
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartModel"
        - $ref: "#/components/schemas/ResPartSetting"
        - $ref: "#/components/schemas/ResPartStatistic"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - file
        - model
        - setting
        - statistic
        - version
    ResDeleteModel:
      allOf:
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResCreateModel:
      allOf:
        - $ref: "#/components/schemas/ResPartFile"
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartModel"
        - $ref: "#/components/schemas/ResPartSetting"
        - $ref: "#/components/schemas/ResPartStatistic"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - file
        - model
        - setting
        - statistic
        - version
    ResGetModelComputations:
      allOf:
        - $ref: "#/components/schemas/ResPartModelComputation"
        - $ref: "#/components/schemas/ResPartPagination"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - computations
        - pagination
        - version
    ResGetModelState:
      allOf:
        - $ref: "#/components/schemas/ResPartModelState"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - modelState
        - version
    ResGetModelStateData:
      allOf:
        - $ref: "#/components/schemas/ResPartModelStateData"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - modelState
        - version
    ResCreateModelState:
      allOf:
        - title: ResPartAsset
          type: object
          properties:
            asset:
              title: ResModelStateAsset
              description: Model-State image asset.
              allOf:
                - $ref: "#/components/schemas/ResAsset"
                - type: object
                  required:
                    - modelState
        - $ref: "#/components/schemas/ResPartModelState"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - modelState
        - version
    ResListModelStates:
      allOf:
        - title: ResPartList
          type: object
          properties:
            list:
              title: ResModelStateList
              allOf:
                - $ref: "#/components/schemas/ResList"
                - type: object
                  required:
                    - modelState
        - $ref: "#/components/schemas/ResPartPagination"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - list
        - pagination
        - version
    ResDeleteModelState:
      allOf:
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResCleanupExports:
      allOf:
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResCleanupOutputs:
      allOf:
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResCleanupTextures:
      allOf:
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResGetCleanupStatus:
      allOf:
        - $ref: "#/components/schemas/ResPartCleanup"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - cleanup
        - version
    ResUpdateParameterDefaultValues:
      allOf:
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResUpdateParameterDefinitions:
      allOf:
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResComputeOutputs:
      allOf:
        - $ref: "#/components/schemas/ResPartActions"
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartOutputs"
        - $ref: "#/components/schemas/ResPartTemplates"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResGetCachedOutputs:
      allOf:
        - $ref: "#/components/schemas/ResPartActions"
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartOutputs"
        - $ref: "#/components/schemas/ResPartTemplates"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResUpdateOutputDefinitions:
      allOf:
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResListOutputVersions:
      allOf:
        - title: ResPartList
          type: object
          properties:
            list:
              title: ResOutputList
              allOf:
                - $ref: "#/components/schemas/ResList"
                - type: object
                  required:
                    - output
        - $ref: "#/components/schemas/ResPartPagination"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - list
        - pagination
        - version
    ResListSdtfs:
      allOf:
        - title: ResPartList
          type: object
          properties:
            list:
              title: ResSdtfList
              allOf:
                - $ref: "#/components/schemas/ResList"
                - type: object
                  required:
                    - sdtf
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartPagination"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - list
        - pagination
        - version
    ResDeleteSdtf:
      allOf:
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResUploadSdtf:
      allOf:
        - title: ResPartAsset
          type: object
          properties:
            asset:
              title: ResSdtfAsset
              description: sdTF assets.
              allOf:
                - $ref: "#/components/schemas/ResAsset"
                - type: object
                  required:
                    - sdtf
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - asset
        - version
    ResCreateSessionByModel:
      allOf:
        - $ref: "#/components/schemas/ResPartActions"
        - $ref: "#/components/schemas/ResPartExports"
        - $ref: "#/components/schemas/ResPartFile"
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartModel"
        - $ref: "#/components/schemas/ResPartModelStateData"
        - $ref: "#/components/schemas/ResPartOutputs"
        - $ref: "#/components/schemas/ResPartParameters"
        - $ref: "#/components/schemas/ResPartSessionId"
        - $ref: "#/components/schemas/ResPartSetting"
        - $ref: "#/components/schemas/ResPartStatistic"
        - $ref: "#/components/schemas/ResPartTemplates"
        - $ref: "#/components/schemas/ResPartVersion"
        - $ref: "#/components/schemas/ResPartViewer"
        - $ref: "#/components/schemas/ResPartViewerSettingsVersion"
        - $ref: "#/components/schemas/ResPartWarnings"
      required:
        - actions
        - file
        - model
        - sessionId
        - setting
        - statistic
        - templates
        - version
        - viewer
        - viewerSettingsVersion
    ResCreateSessionByTicket:
      allOf:
        - $ref: "#/components/schemas/ResPartActions"
        - $ref: "#/components/schemas/ResPartExports"
        - $ref: "#/components/schemas/ResPartFile"
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartModel"
        - $ref: "#/components/schemas/ResPartModelStateData"
        - $ref: "#/components/schemas/ResPartOutputs"
        - $ref: "#/components/schemas/ResPartParameters"
        - $ref: "#/components/schemas/ResPartSessionId"
        - $ref: "#/components/schemas/ResPartSetting"
        - $ref: "#/components/schemas/ResPartStatistic"
        - $ref: "#/components/schemas/ResPartTemplates"
        - $ref: "#/components/schemas/ResPartVersion"
        - $ref: "#/components/schemas/ResPartViewer"
        - $ref: "#/components/schemas/ResPartViewerSettingsVersion"
        - $ref: "#/components/schemas/ResPartWarnings"
      required:
        - actions
        - file
        - model
        - sessionId
        - setting
        - statistic
        - templates
        - version
        - viewer
        - viewerSettingsVersion
    ResGetSessionDefaults:
      allOf:
        - $ref: "#/components/schemas/ResPartActions"
        - $ref: "#/components/schemas/ResPartExports"
        - $ref: "#/components/schemas/ResPartMessage"
        - $ref: "#/components/schemas/ResPartModel"
        - $ref: "#/components/schemas/ResPartOutputs"
        - $ref: "#/components/schemas/ResPartParameters"
        - $ref: "#/components/schemas/ResPartSessionId"
        - $ref: "#/components/schemas/ResPartStatistic"
        - $ref: "#/components/schemas/ResPartTemplates"
        - $ref: "#/components/schemas/ResPartVersion"
        - $ref: "#/components/schemas/ResPartViewer"
        - $ref: "#/components/schemas/ResPartViewerSettingsVersion"
      required:
        - actions
        - file
        - model
        - sessionId
        - setting
        - statistic
        - templates
        - version
        - viewer
        - viewerSettingsVersion
    ResCloseSession:
      allOf:
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - version
    ResCreateTicket:
      allOf:
        - $ref: "#/components/schemas/ResPartFile"
        - $ref: "#/components/schemas/ResPartModel"
        - $ref: "#/components/schemas/ResPartSetting"
        - $ref: "#/components/schemas/ResPartStatistic"
        - $ref: "#/components/schemas/ResPartTicket"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - file
        - model
        - setting
        - statistic
        - ticket
        - version
    ResDecryptTicket:
      allOf:
        - $ref: "#/components/schemas/ResPartDecryptedTicket"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - decryptedTicket
        - version
    ResGetMinionsInfo:
      allOf:
        - title: ResPartSystem
          type: object
          properties:
            system:
              title: ResMinionSystem
              description: Minion system information.
              allOf:
                - $ref: "#/components/schemas/ResSystem"
                - type: object
                  required:
                    - minions
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - system
        - version
    ResGetWorkersInfo:
      allOf:
        - title: ResPartSystem
          type: object
          properties:
            system:
              title: ResWorkerSystem
              description: Worker system information.
              allOf:
                - $ref: "#/components/schemas/ResSystem"
                - type: object
                  required:
                    - workers
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - system
        - version
    ResListTextures:
      allOf:
        - title: ResPartList
          type: object
          properties:
            list:
              title: ResTextureList
              allOf:
                - $ref: "#/components/schemas/ResList"
                - type: object
                  required:
                    - texture
        - $ref: "#/components/schemas/ResPartPagination"
        - $ref: "#/components/schemas/ResPartVersion"
      required:
        - list
        - pagination
        - version

    #-------------------------------------------------------------------------#
    #- Response data parts                                                   -#
    #-------------------------------------------------------------------------#
    ResPartVersion:
      type: object
      properties:
        version:
          description: Version of the Geometry Backend API.
          type: string
    ResPartMessage:
      type: object
      properties:
        message:
          description: Contains urgent information about the system.
          type: string
    ResPartWarnings:
      type: object
      properties:
        warnings:
          description: >-
            An array of warnings encountered during request processing. These warnings indicate
            potential issues or non-critical conditions but did not prevent the request from being
            successfully processed.
          type: array
          items:
            type: string
    ResPartTicket:
      type: object
      properties:
        ticket:
          description: The ticket to create a model session.
          type: string
    ResPartSessionId:
      type: object
      properties:
        sessionId:
          description: The ID of the created session.
          allOf:
            - $ref: "#/components/schemas/Uuid"
    ResPartViewerSettingsVersion:
      type: object
      properties:
        viewerSettingsVersion:
          description: The current version of the viewer settings.
          type: string
    ResPartDecryptedTicket:
      type: object
      properties:
        decryptedTicket:
          description: Decrypted ticket details.
          allOf:
            - $ref: "#/components/schemas/ResTicket"
    ResPartAuthorizationGroup:
      type: object
      properties:
        auth_group:
          description: The auth-group to use for ticked-based authentication.
          allOf:
            - $ref: "#/components/schemas/Uuid"
    ResPartActions:
      type: object
      properties:
        actions:
          description: Actions the client may take.
          type: array
          items:
            $ref: "#/components/schemas/ResAction"
    ResPartTemplates:
      type: object
      properties:
        templates:
          description: Request templates for actions.
          type: array
          items:
            $ref: "#/components/schemas/ResTemplate"
    ResPartModel:
      type: object
      properties:
        model:
          description: The definitions of a ShapeDiver model.
          allOf:
            - $ref: "#/components/schemas/ResModel"
    ResPartFile:
      type: object
      properties:
        file:
          description: Links regarding the model file.
          allOf:
            - $ref: "#/components/schemas/ResFile"
    ResPartStatistic:
      type: object
      properties:
        statistic:
          description: Statistics of a model.
          allOf:
            - $ref: "#/components/schemas/ResStatistic"
    ResPartSetting:
      type: object
      properties:
        setting:
          description: Various settings.
          allOf:
            - $ref: "#/components/schemas/ResSettings"
    ResPartParameters:
      type: object
      properties:
        parameters:
          description: >-
            Parameter definitions, not contained with every response. A directory of parameter-IDs
            and parameters.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ResParameter"
    ResPartPlugins:
      type: object
      properties:
        plugins:
          $ref: "#/components/schemas/ResPlugins"
    ResPartViewer:
      type: object
      properties:
        viewer:
          description: Viewer specific data.
          allOf:
            - $ref: "#/components/schemas/ResViewer"
    ResPartOutputs:
      type: object
      properties:
        outputs:
          description: >-
            Outputs of the model for the given parameter values. A directory of output-IDs and
            outputs.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ResOutputOrDefinition"
    ResPartExports:
      type: object
      properties:
        exports:
          description: >-
            Exports of the model for the given parameter values. A directory of export-IDs and
            exports.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ResExportOrDefinition"
    ResPartAnalytics:
      type: object
      properties:
        analytics:
          description: Statistics of the model for the given timespan.
          allOf:
            - $ref: "#/components/schemas/ResAnalytics"
    ResPartGltfUpload:
      type: object
      properties:
        gltf:
          description: glTF information.
          allOf:
            - $ref: "#/components/schemas/ResGltfUpload"
    ResPartModelComputation:
      type: object
      properties:
        computations:
          description: Statistics about model computations.
          type: array
          items:
            $ref: "#/components/schemas/ResModelComputation"
    ResPartModelState:
      type: object
      properties:
        modelState:
          description: Model-State information.
          allOf:
            - $ref: "#/components/schemas/ResModelState"
    ResPartModelStateData:
      type: object
      properties:
        modelState:
          description: Model-State information.
          allOf:
            - $ref: "#/components/schemas/ResModelStateData"
    ResPartPagination:
      type: object
      properties:
        pagination:
          description: Pagination information.
          allOf:
            - $ref: "#/components/schemas/ResPagination"
    ResPartCleanup:
      type: object
      properties:
        cleanup:
          description: Model cleanup information.
          type: array
          items:
            $ref: "#/components/schemas/ResModelCleanupProcess"

    #-------------------------------------------------------------------------#
    #- Response data sub-structures                                          -#
    #-------------------------------------------------------------------------#
    ResPagination:
      description: Pagination component.
      type: object
      properties:
        limit:
          description: The query limit that has been used in the request.
          type: integer
          minimum: 1
          maximum: 100
        next_offset:
          description: >-
            The offset that can be used in the next request to query the remaining items. This
            property is missing when all items have been processed.
          type: string
      required:
        - limit
    ResAnalytics:
      description: Analytics components.
      type: object
      properties:
        models:
          type: array
          items:
            $ref: "#/components/schemas/ResModelStatistic"
        creditMetrics:
          type: array
          items:
            $ref: "#/components/schemas/ResAnyCreditMetric"
      required:
        - models
        - creditMetrics
    ResModelStatistic:
      description: Aggregated model session statistics.
      type: object
      properties:
        modelid:
          description: Requested model ID.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        timestamp:
          description: Either an extended date-time or a 'merged'-specifier.
          type: string
        isCompilationDone:
          description: Aggregation for this timestamp has finished.
          type: boolean
        count:
          description: |-
            Number of (technical) sessions for the given model and timestamp. A technical session
            may last up to two hours, after which it will get cancelled by the backend.

            CAUTION: Not to be confused with credits!
          type: integer
          minimum: 0
        billableCount:
          description: >-
            Billable duration-based credit count, based on maximum duration of 10 minutes per
            credit.
          type: integer
          minimum: 0
        duration:
          description: Statistics on the duration of all sessions.
          allOf:
            - $ref: "#/components/schemas/ResOnDurationStatistic"
        app:
          description: Statistics on the duration of app sessions.
          allOf:
            - $ref: "#/components/schemas/ResOnDurationStatistic"
        backend:
          description: Statistics on the duration of backend sessions.
          allOf:
            - $ref: "#/components/schemas/ResOnDurationStatistic"
        embedded:
          description: Statistics on the duration of embedded sessions.
          allOf:
            - $ref: "#/components/schemas/ResOnDurationStatistic"
        desktop:
          description: Statistics on the duration of desktop sessions.
          allOf:
            - $ref: "#/components/schemas/ResOnDurationStatistic"
        customize:
          description: Statistics on customization requests per session.
          allOf:
            - $ref: "#/components/schemas/ResOnActionStatistic"
        export:
          description: Statistics on export requests per session.
          allOf:
            - $ref: "#/components/schemas/ResOnActionStatistic"
      required:
        - modelid
        - timestamp
        - isCompilationDone
        - count
        - billableCount
        - duration
        - app
        - backend
        - embedded
        - desktop
        - customize
        - export
    ResOnDurationStatistic:
      type: object
      properties:
        count:
          description: |-
            * `duration`, `app`, `embedded`, `backend`, `desktop`: Number of (technical) sessions
              from all sources (duration) or from one specific source (app, embedded, backend,
              desktop), for the given model and timestamp.
            * `export`, `customize`: Number of sessions which have export requests.
          type: integer
          minimum: 0
        billableCount:
          description: |-
            * `duration`, `app`, `embedded`, `backend`, `desktop`: Billable duration-based credit
              count for all sessions, based on maximum duration of 10 minutes per credit.
            * `export`, `customize`: Billable duration-based credit count for sessions which have
              export requests, based on maximum duration of 10 minutes per credit.
          type: integer
          minimum: 0
        min:
          description: |-
            * `duration`, `app`, `embedded`, `backend`, `desktop`: Cumulative distribution function
              of the duration, for all sessions for the given model and timestamp.
            * `export`, `customize`: Cumulative distribution function of the number of export
              requests per session, for sessions which have export requests.
          type: integer
          minimum: 0
        max:
          description: |-
            * `duration`, `app`, `embedded`, `backend`, `desktop`: Cumulative distribution function
              of the duration, for all sessions for the given model and timestamp.
            * `export`, `customize`: Cumulative distribution function of the number of export
              requests per session, for sessions which have export requests.
          type: integer
          minimum: 0
        avg:
          description: |-
            * `duration`, `app`, `embedded`, `backend`, `desktop`: Average duration of all sessions
              for the given model and timestamp.
            * `export`, `customize`: Average number of export requests per session, for sessions
              which have export requests.
          type: integer
          minimum: 0
        sum:
          description: |-
            * `duration`, `app`, `embedded`, `backend`, `desktop`: Total duration of all sessions
              for the given model and timestamp.
            * `export`, `customize`: Total number of export requests for all sessions which have
              export requests.
          type: integer
          minimum: 0
      required:
        - count
        - billableCount
        - min
        - max
        - avg
        - sum
    ResOnActionStatistic:
      allOf:
        - $ref: "#/components/schemas/ResOnDurationStatistic"
        - type: object
          properties:
            sumApp:
              description: |-
                `customize`: Total number of actions, for ShapeDiver Platform sessions for which
                the type of action happened.

                Note: New property - will contain `0` for entries before November 2019.
              type: integer
              minimum: 0
            sumBackend:
              description: |-
                `customize`: Total number of customization requests for backend sessions which have
                customization requests.

                `export`: Total number of export requests for backend sessions which have export
                requests.

                Note: New property - will contain `0` for entries before November 2019.
              type: integer
              minimum: 0
            sumEmbedded:
              description: |-
                `customize`: Total number of customization requests for embedded sessions which
                have customization requests.

                `export`: Total number of export requests for embedded sessions which have export
                requests.

                Note: New property - will contain `0` for entries before November 2019.
              type: integer
              minimum: 0
            sumDesktop:
              description: |-
                `customize`: Total number of actions, for desktop client sessions for which the
                type of action happened.

                Note: New property - will contain `0` for entries before January 2021.
              type: integer
              minimum: 0
          required:
            - sumApp
            - sumBackend
            - sumEmbedded
            - sumDesktop
    ResAnyCreditMetric:
      description: The ID of any type of credit metric.
      oneOf:
        - title: ResModelCreditMetric
          description: Aggregated credit metrics for a model.
          allOf:
            - $ref: "#/components/schemas/ResBaseCreditMetric"
            - type: object
              properties:
                modelId:
                  description: Requested model ID.
                  allOf:
                    - $ref: "#/components/schemas/Uuid"
                userId:
                  description: This property is never set.
                  # FIXME: Workaround until OAS 3.1 - use `null` instead!
                  type: boolean
                  nullable: true
                  deprecated: true
                orgId:
                  description: This property is never set.
                  # FIXME: Workaround until OAS 3.1 - use `null` instead!
                  type: boolean
                  nullable: true
                  deprecated: true
              required:
                - modelId
        - title: ResUserCreditMetric
          description: Aggregated credit metrics for a user.
          allOf:
            - $ref: "#/components/schemas/ResBaseCreditMetric"
            - type: object
              properties:
                modelId:
                  description: This property is never set.
                  # FIXME: Workaround until OAS 3.1 - use `null` instead!
                  type: boolean
                  nullable: true
                  deprecated: true
                userId:
                  description: Requested user ID.
                  allOf:
                    - $ref: "#/components/schemas/Uuid"
              required:
                - userId
        - title: ResOrganizationCreditMetric
          description: Aggregated credit metrics for a organization.
          allOf:
            - $ref: "#/components/schemas/ResBaseCreditMetric"
            - type: object
              properties:
                modelId:
                  description: This property is never set.
                  # FIXME: Workaround until OAS 3.1 - use `null` instead!
                  type: boolean
                  nullable: true
                  deprecated: true
                orgId:
                  description: Requested organization ID.
                  allOf:
                    - $ref: "#/components/schemas/Uuid"
              required:
                - orgId
        - title: ResSystemCreditMetric
          description: Aggregated credit metrics for a system.
          allOf:
            - $ref: "#/components/schemas/ResBaseCreditMetric"
            - type: object
              properties:
                system:
                  description: Requested system.
                  type: boolean
              required:
                - system
        - title: ResModelUserCreditMetric
          description: Aggregated credit metrics for a model-user.
          allOf:
            - $ref: "#/components/schemas/ResBaseCreditMetric"
            - type: object
              properties:
                modelId:
                  description: Requested model ID.
                  allOf:
                    - $ref: "#/components/schemas/Uuid"
                userId:
                  description: Requested user ID.
                  allOf:
                    - $ref: "#/components/schemas/Uuid"
              required:
                - modelId
                - userId
        - title: ResModelOrganizationCreditMetric
          description: Aggregated credit metrics for a model-organization.
          allOf:
            - $ref: "#/components/schemas/ResBaseCreditMetric"
            - type: object
              properties:
                modelId:
                  description: Requested model ID.
                  allOf:
                    - $ref: "#/components/schemas/Uuid"
                orgId:
                  description: Requested organization ID.
                  allOf:
                    - $ref: "#/components/schemas/Uuid"
              required:
                - modelId
                - orgId
    ResBaseCreditMetric:
      type: object
      properties:
        timestamp:
          description: Either an extended date-time or a 'merged'-specifier.
          type: string
        isCompilationDone:
          description: Aggregation for this timestamp has finished.
          type: boolean
        ar:
          title: ResArCreditMetric
          description: Downloads of AR scenes.
          type: object
          properties:
            credits:
              description: Number of AR downloads charged.
              type: integer
              minimum: 0
          required:
            - credits
        loading:
          title: ResLoadingCreditMetric
          description: Information about loading times on the Geometry Workers.
          type: object
          properties:
            credits:
              description: Number of started 10-second chunks charged.
              type: integer
              minimum: 0
            count:
              description: Number of load requests.
              type: integer
              minimum: 0
          required:
            - credits
            - count
        limited:
          $ref: "#/components/schemas/ResLimitedCreditMetric"
        default:
          $ref: "#/components/schemas/ResDefaultCreditMetric"
      required:
        - ar
        - timestamp
        - isCompilationDone
        - loading
        - limited
        - default
    ResLimitedCreditMetric:
      description: Aggregated metrics for 'rate-limited timeslot' sessions.
      type: object
      properties:
        outputs:
          title: ResRateLimitedOutputMetric
          description: Pure output requests.
          type: object
          properties:
            count:
              description: Number of pure output requests.
              type: integer
              minimum: 0
          required:
            - count
        exports:
          title: ResRateLimitedExportMetric
          description: Pure export requests.
          type: object
          properties:
            credits:
              description: Number of pure export requests charged.
              type: integer
              minimum: 0
          required:
            - credits
        combined:
          title: ResRateLimitedCombinedMetric
          description: Combined output and export requests.
          type: object
          properties:
            credits:
              description: Number of combined output and export requests charged.
              type: integer
              minimum: 0
          required:
            - credits
        sessions:
          title: ResRateLimitedSessionMetric
          description: Session information.
          type: object
          properties:
            count:
              description: Number of sessions.
              type: integer
              minimum: 0
            credits:
              description: Number of started 10-minute periods of sessions charged.
              type: integer
              minimum: 0
            duration:
              description: The total duration of all sessions, in milliseconds.
              type: integer
              minimum: 0
          required:
            - count
            - credits
            - duration
        computations:
          title: ResRateLimitedComputationMetric
          description: Computations information.
          type: object
          properties:
            count:
              description: Number of computations.
              type: integer
              minimum: 0
            credits:
              description: Number of finished 10-second chunks charged.
              type: integer
              minimum: 0
            duration:
              description: Total duration of computation time, in milliseconds.
              type: integer
              minimum: 0
            countPerChunks:
              description: >-
                Count of computations per computation time expressed in started 10-second chunks.
              type: object
              additionalProperties:
                type: integer
          required:
            - count
            - credits
            - duration
            - countPerChunks
      required:
        - outputs
        - exports
        - combined
        - sessions
        - ar
        - computations
    ResDefaultCreditMetric:
      description: Aggregated metrics for 'default' sessions.
      type: object
      properties:
        outputs:
          title: ResDefaultOutputMetric
          description: Pure output requests.
          type: object
          properties:
            credits:
              description: Number of pure output requests charged.
              type: integer
              minimum: 0
          required:
            - credits
        exports:
          title: ResDefaultExportMetric
          description: Pure export requests.
          type: object
          properties:
            credits:
              description: Number of pure export requests charged.
              type: integer
              minimum: 0
          required:
            - credits
        combined:
          title: ResDefaultCombinedMetric
          description: Combined output and export requests.
          type: object
          properties:
            credits:
              description: Number of combined output and export requests charged.
              type: integer
              minimum: 0
          required:
            - credits
        sessions:
          title: ResDefaultSessionMetric
          description: Session information.
          type: object
          properties:
            count:
              description: Number of sessions.
              type: integer
              minimum: 0
            duration:
              description: The total duration of all sessions, in milliseconds.
              type: integer
              minimum: 0
          required:
            - count
            - duration
        computations:
          title: ResDefaultComputationMetric
          description: Computations information.
          type: object
          properties:
            count:
              description: Number of computations.
              type: integer
              minimum: 0
            credits:
              description: Number of finished 10-second chunks charged.
              type: integer
              minimum: 0
            duration:
              description: Total duration of computation time, in milliseconds.
              type: integer
              minimum: 0
            countPerChunks:
              description: >-
                Count of computations per computation time expressed in started 10-second chunks.
              type: object
              additionalProperties:
                type: integer
          required:
            - count
            - credits
            - duration
            - countPerChunks
      required:
        - outputs
        - exports
        - combined
        - sessions
        - ar
        - computations
    ResAsset:
      description: ShapeDiver API response for asset upload requests.
      type: object
      properties:
        file:
          description: A directory of parameter-IDs and asset-definitions.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ResAssetDefinition"
        sdtf:
          type: array
          items:
            $ref: "#/components/schemas/ResAssetDefinition"
        modelState:
          description: The asset-definition of a Model-State image.
          allOf:
            - $ref: "#/components/schemas/ResAssetDefinition"
    ResAssetDefinition:
      description: Result part for the response to an asset upload request.
      type: object
      properties:
        id:
          description: ID of the file to be uploaded.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        href:
          description: >-
            href the file should be uploaded to (typically a time-limited pre-signed url).
          type: string
        headers:
          title: ResAssetUploadHeaders
          description: HTTP headers to use when uploading an asset to ShapeDiver.
          type: object
          properties:
            contentDisposition:
              type: string
              description: The value of the Content-Disposition HTTP header.
            contentType:
              type: string
              description: The value of the Content-Type HTTP header.
          required:
            - contentType
      required:
        - id
        - href
        - headers
    ResExportDefinitionType:
      description: Types of exports.
      type: string
      enum:
        - unknown
        - download
        - email
        - shapeways
      x-enum-varnames:
        - UNKNOWN
        - DOWNLOAD
        - EMAIL
        - SHAPEWAYS
    ResExportDefinition:
      description: Export definition WITHOUT results as exposed on the API.
      type: object
      properties:
        id:
          description: >-
            ID of the export, dependent on model ID, and therefore changing each time a model gets
            uploaded.
          type: string
        uid:
          description: >-
            Constant ID of the export, not dependent on model ID, and therefore NOT changing each
            time a model gets uploaded. Might be undefined because this property was introduced in
            summer 2020 and does not exist for exports of older models.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        name:
          description: Name of the export.
          type: string
        type:
          description: Type of export.
          allOf:
            - $ref: "#/components/schemas/ResExportDefinitionType"
        dependency:
          description: List of IDs of parameters influencing this export.
          type: array
          items:
            type: string
        group:
          title: ResExportDefinitionGroup
          allOf:
            - $ref: "#/components/schemas/CommonsGroup"
            - description: Group information of an export definition.
        order:
          description: Ordering of the export in client applications.
          type: integer
        tooltip:
          description: Description that is shown as a tooltip in the clients.
          type: string
        displayname:
          description: Parameter name to display instead of `name`.
          type: string
        hidden:
          description: Controls whether the parameter should be hidden in the UI.
          type: boolean
        version: # Required to distinguish from ResExport
          description: This property is never set.
          # FIXME: Workaround until OAS 3.1 - use `null` instead!
          type: boolean
          nullable: true
          deprecated: true
      required:
        - id
        - name
        - type
        - dependency
        - hidden
    ResExport:
      description: Export definition WITH results as exposed on the API.
      allOf:
        - $ref: "#/components/schemas/ResExportDefinition"
        - type: object
          properties:
            version:
              description: Requested version of the export.
              type: string
            delay:
              description: |-
                The delay in milliseconds after which an export cache request shall be sent to
                check again for this export version. This property is used ONLY if the export
                version has not been computed yet.

                Note that the existence of this property does not necessarily imply the presence of
                an active or queued computation for the respective export version.
              type: integer
              minimum: 0
            content:
              description: >-
                Result parts. In case this array does not exist, this means that the workers have
                not finished computation for this output version.
              type: array
              items:
                $ref: "#/components/schemas/ResExportContent"
            msg:
              description: >-
                In case computation of the export version (temporarily) failed. Contains a message
                explaining what went wrong.
              type: string
            filename:
              description: Optional suggested filename for the files to be downloaded.
              type: string
            result:
              title: ResExportResult
              description: Optional result object for exports of type `email` and `shapeways`.
              type: object
              properties:
                msg:
                  description: Optional success message for user.
                  type: string
                err:
                  description: Optional error message for user.
                  type: string
                href:
                  description: Optional href to redirect user to for download.
                  type: string
                modelId:
                  description: Optional shapeways model ID.
                  allOf:
                    - $ref: "#/components/schemas/Uuid"
            status_computation:
              description: Status of the computation which resulted in the export version.
              allOf:
                - $ref: "#/components/schemas/ResComputationStatus"
            status_collect:
              description: Status of collecting results for the export version.
              allOf:
                - $ref: "#/components/schemas/ResComputationStatus"
          required:
            - version
    ResExportContent:
      description: An item of the `content` array for exports.
      type: object
      properties:
        format:
          description: Format of export result (file extension).
          type: string
        href:
          description: Link for download of exported asset.
          type: string
        size:
          description: Optional size of exported asset, in bytes.
          type: integer
          minimum: 0
        contentType:
          description: Optional Content-Type for parts of type `asset`.
          type: string
      required:
        - format
        - href
    ResExportOrDefinition:
      description: Either a full export or it's definition.
      oneOf:
        - $ref: "#/components/schemas/ResExportDefinition"
        - $ref: "#/components/schemas/ResExport"
    ResList:
      description: ShapeDiver API response of a list-request.
      type: object
      properties:
        file:
          description: A directory of file objects.
          type: array
          items:
            $ref: "#/components/schemas/ResFileInfo"
        sdtf:
          description: A directory of sdTF objects.
          type: array
          items:
            $ref: "#/components/schemas/ResSdtfInfo"
        model:
          description: A directory of ShapeDiver models.
          type: array
          items:
            $ref: "#/components/schemas/ResModel"
        modelState:
          description: A directory of Model-States.
          type: array
          items:
            $ref: "#/components/schemas/ResModelStateInfo"
        output:
          description: A directory of output versions.
          type: array
          items:
            $ref: "#/components/schemas/ResOutput"
        export:
          description: A directory of export versions.
          type: array
          items:
            $ref: "#/components/schemas/ResExport"
        texture:
          description: A directory of model textures.
          type: array
          items:
            $ref: "#/components/schemas/ResTexture"
    ResFileInfo:
      description: Result part for the response to a list request for file objects.
      type: object
      properties:
        id:
          description: ID of the file.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        parameterId:
          description: ID of the parameter that the file is assigned to.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        size:
          description: The size of the file in bytes.
          type: integer
          minimum: 0
        filename:
          description: The name of the file, when specified during the upload.
          type: string
      required:
        - id
        - parameterId
        - size
    ResSdtfInfo:
      description: Result part for the response to a list request for sdTF objects.
      type: object
      properties:
        id:
          description: ID of the sdTF.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        namespace:
          description: The namespace of the sdTF.
          type: string
        size:
          description: The size of the sdTF in bytes.
          type: integer
          minimum: 0
      required:
        - id
        - namespace
        - size
    ResAction:
      description: Defines the actions to be taken on the response data.
      type: object
      properties:
        name:
          description: Name of the action, e.g. customize, close, default, etc.
          type: string
        title:
          description: Title of the action, e.g. 'Customize model', 'Close session', etc.
          type: string
        href:
          description: Hyperlink to make the request to.
          type: string
        method:
          description: HTTP method to use.
          type: string
        template:
          description: >-
            Template for the request body, references into the 'templates' array of the response
            (e.g. 'customize-request').
          type: string
      required:
        - name
        - title
        - href
        - method
    ResTemplate:
      description: Provides templates for actions.
      type: object
      properties:
        name:
          description: Name of the template, e.g. 'customize-request'.
          type: string
        title:
          description: Title of the template, e.g. 'Template for model customization request'.
          type: string
        data:
          description: Template for the request body.
          type: object
          properties: {}
      required:
        - name
        - title
        - data
    ResModel:
      description: Definition of a ShapeDiver model.
      type: object
      properties:
        allowed_libraries:
          description: List of allowed Grasshopper libraries.
          type: array
          items:
            type: string
        backlinkurl:
          description: Link to view the model on the ShapeDiver Platform.
          type: string
        checkurl:
          description: >-
            Link to continue the checking process of the model on the ShapeDiver Platform.
          type: string
        createdate:
          description: Timestamp of creation of the model.
          allOf:
            - $ref: "#/components/schemas/DateTimeIso"
        documentid:
          description: ID of the Grasshopper document.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        filename:
          description: Original name of the model's grasshopper file.
          type: string
        id:
          description: ID of the model.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        id2:
          description: >-
            Optional second ID of the model. This value can be unset via an empty string.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        msg:
          description: Optional message, used in case the model was denied.
          type: string
        name:
          description: Model name.
          type: string
        org_id:
          description: Organization ID of the user that owns the model.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        stat:
          $ref: "#/components/schemas/ResModelStatus"
        user_id:
          description: ShapeDiver User ID of the model owner.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        webhook_url:
          description: >-
            The webhook-url for updating the platform backend about model status changes.
          type: string
        webhook_token:
          description: The webhook-token for authentication used by the webhook-url.
          type: string
      required:
        - id
        - stat
    ResModelStatus:
      <<: *CommonsModelStatus
      description: Status of the model.
    ResFile:
      description: Definitions of a model file.
      type: object
      properties:
        upload:
          description: URL to upload a model file.
          type: string
        download:
          description: URL to download a model file.
          type: string
    ResPlugins:
      description: Information about Grasshopper plugins.
      type: object
      properties:
        libraries:
          description: Libraries used by the model.
          type: array
          items:
            title: ResPluginsLibrary
            description: Definition of a model library.
            type: object
            properties:
              id:
                description: Library ID.
                type: string
              version:
                description: Library version.
                type: string
              name:
                description: Library name.
                type: string
              author:
                description: Library author.
                type: string
              assemblyFullName:
                description: Assembly name (not present in Rhino 5).
                type: string
              assemblyVersion:
                description: Assembly version (not present in Rhino 5).
                type: string
            required:
              - id
              - version
              - name
              - author
    ResStatistic:
      description: Model statistic object.
      type: object
      properties:
        comptime:
          description: >-
            Cumulative time (msec) which has been spent for processing computation requests by the
            workers (pure computation time).
          type: integer
          minimum: 0
        lastsession:
          description: Timestamp of last session created for the model.
          allOf:
            - $ref: "#/components/schemas/DateTimeIso"
        lastview:
          description: Timestamp of last view of the model.
          allOf:
            - $ref: "#/components/schemas/DateTimeIso"
        memUsage:
          description: Approximate memory usage of model on workers, in bytes.
          type: integer
          minimum: 0
        numcomp:
          description: >-
            Number of computations which have been carried out for the model by the workers so far.
          type: integer
          minimum: 0
        numsessions:
          description: Number of sessions which have been opened for the model so far.
          type: integer
          minimum: 0
        requesttime:
          description: >-
            Cumulative time (msec) which has been spent for processing computation requests by the
            workers (computation time plus overheads).
          type: integer
          minimum: 0
        size:
          description: File size of the model file in bytes.
          type: integer
          minimum: 0
    ResParameter:
      description: Definition of a parameter of a ShapeDiver Model.
      type: object
      properties:
        id:
          description: Unique ID of parameter, stays constant each time a model gets uploaded.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        choices:
          description: Choice of parameter values for types `STRINGLIST`.
          type: array
          items:
            type: string
        decimalplaces:
          description: Number of decimal places for numeric types.
          type: integer
          minimum: 0
        defval:
          description: Default value of parameter, stringified.
          type: string
        expression:
          description: Optional expression to be applied to value for visualisation.
          type: string
        format:
          description: List of file formats (content types) supported, used for type `FILE`.
          type: array
          items:
            type: string
        min:
          description: Minimum value (stringified) for numeric types.
          type: number
        max:
          description: |-
            Maximum:
            * value (stringified) for numeric types.
            * string length for type `STRING`.
            * file size allowed (stringified) for type FILE.
          type: number
        umin:
          description: Minimum `u` value for two dimensional domain parameters.
          type: number
        umax:
          description: Maximum `u` value for two dimensional domain parameters.
          type: number
        vmin:
          description: Minimum `v` value for two dimensional domain parameters.
          type: number
        vmax:
          description: Maximum `v` value for two dimensional domain parameters.
          type: number
        interval:
          description: Step size used for domain parameters.
          type: number
        name:
          description: Name of the parameter.
          type: string
        type:
          description: Type of parameter.
          allOf:
            - $ref: "#/components/schemas/ResParameterType"
        visualization:
          description: >-
            Optional preferred visualization for parameters of type `FILE` and `STRINGLIST`.
          allOf:
            - $ref: "#/components/schemas/ResVisualizationType"
        structure:
          description: Structure of a parameter.
          allOf:
            - $ref: "#/components/schemas/ResStructureType"
        group:
          title: ResParameterGroup
          allOf:
            - $ref: "#/components/schemas/CommonsGroup"
            - description: Group information of a parameter.
        hint:
          description: Technical hint for the UI implementation.
          type: string
        order:
          description: Ordering of the parameter in client applications.
          type: integer
        tooltip:
          description: Description that is shown as a tooltip in the clients.
          type: string
        displayname:
          description: Parameter name to display instead of `name`.
          type: string
        hidden:
          description: Controls whether the parameter should be hidden in the UI.
          type: boolean
        settings:
          description: Holds parameter-type specific information.
          type: object
      required:
        - id
        - defvali
        - name
        - type
        - hidden
    ResParameterType:
      description: |-
        Type of parameter.

        All types starting with 's' are s-type parameters while the others are basic parameter
        types.
      type: string
      enum:
        - sBitmap
        - sBool
        - sBox
        - sBrep
        - sCircle
        - sColor
        - sCurve
        - sDomain
        - sDomain2D
        - sInteger
        - sLine
        - sMesh
        - sNumber
        - sPlane
        - sPoint
        - sRectangle
        - sString
        - sSubdiv
        - sSurface
        - sTime
        - sVector
        - Bool
        - Color
        - Drawing
        - Even
        - File
        - Float
        - Int
        - Interaction
        - Odd
        - String
        - StringList
        - Time
        - unknown
      x-enum-varnames:
        - S_BITMAP
        - S_BOOL
        - S_BOX
        - S_BREP
        - S_CIRCLE
        - S_COLOR
        - S_CURVE
        - S_DOMAIN
        - S_DOMAIN_2D
        - S_INTEGER
        - S_LINE
        - S_MESH
        - S_NUMBER
        - S_PLANE
        - S_POINT
        - S_RECTANGLE
        - S_STRING
        - S_SUBDIV
        - S_SURFACE
        - S_TIME
        - S_VECTOR
        - BOOL
        - COLOR
        - DRAWING
        - EVEN
        - FILE
        - FLOAT
        - INT
        - INTERACTION
        - ODD
        - STRING
        - STRINGLIST
        - TIME
        - UNKNOWN
    ResVisualizationType:
      description: Optional preferred visualization for parameters of type `FILE` and `STRINGLIST`.
      type: string
      enum:
        - unknown
        - button
        - calendar
        - checklist
        - clock
        - cycle
        - dial
        - dropdown
        - geometry
        - image
        - sequence
        - slider
        - swatch
        - text
        - toggle
      x-enum-varnames:
        - UNKNOWN
        - BUTTON
        - CALENDAR
        - CHECKLIST
        - CLOCK
        - CYCLE
        - DIAL
        - DROPDOWN
        - GEOMETRY
        - IMAGE
        - SEQUENCE
        - SLIDER
        - SWATCH
        - TEXT
        - TOGGLE
    ResStructureType:
      description: Structural information of a parameter.
      type: string
      enum: [item, list, tree]
      x-enum-varnames: [ITEM, LIST, TREE]
    ResViewer:
      description: Viewer config object.
      type: object
      properties:
        config:
          type: object
          additionalProperties: true
      required:
        - config
    ResTicket:
      allOf:
        - $ref: "#/components/schemas/CommonsTicket"
        - description: Decrypted ticket details.
          type: object
          required:
            - accessdomains
            - author
            - use_id2
        - type: object
          properties:
            type:
              $ref: "#/components/schemas/ResTicketType"
            model_id:
              description: >-
                Either the model's `id` or `id2` property, depending on the ticket property
                `use_id2`.
              allOf:
                - $ref: "#/components/schemas/Uuid"
          required:
            - type
            - model_id
    ResTicketType:
      <<: *CommonsTicketType
      description: The type of the ticket.
    ResGltfUpload:
      description: Information about uploaded glTF object.
      type: object
      properties:
        href:
          description: The URL to download the glTF file.
          type: string
        sceneId:
          description: >-
            Contains the unique ID of the uploaded scene. Only present for uploads with the
            conversion type `scene`.
          type: string
      required:
        - href
    ResModelCleanupProcess:
      description: Information about a model cleanup process.
      type: object
      properties:
        type:
          description: Type of the model cleanup process.
          allOf:
            - $ref: "#/components/schemas/ResModelCleanupProcessType"
        timestamp_enqueued:
          description: The timestamp when the deletion job has been enqueued.
          allOf:
            - $ref: "#/components/schemas/DateTimeMs"
        total:
          description: The total number of items of this type that are going to be deleted.
          type: integer
          minimum: 0
        deleted:
          description: The number of already deleted items of this type.
          type: integer
          minimum: 0
      required:
        - type
        - timestamp_enqueued
    ResModelCleanupProcessType:
      description: Model cleanup process types.
      type: string
      enum:
        - delete_export_version
        - delete_model_texture
        - delete_output_version
      x-enum-varnames:
        - DELETE_EXPORT_VERSION
        - DELETE_MODEL_TEXTURE
        - DELETE_OUTPUT_VERSION
    ResTexture:
      description: Information about a model texture.
      type: object
      properties:
        modelId:
          description: The ID of the ShapeDiver model.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        textureId:
          description: The texture ID.
          type: string
        url:
          description: The original URL of the texture asset.
          type: string
        width:
          description: The width of the texture.
          type: integer
          minimum: 0
        height:
          description: The height of the texture.
          type: integer
          minimum: 0
        isAssetAvailable:
          description: Is `true` when the texture has been cached, otherwise `false`.
          type: boolean
      required:
        - modelId
        - textureId
        - isAssetAvailable
    ResModelComputation:
      description: Components of a model computation request.
      type: object
      properties:
        id:
          description: ID of the model.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        timestamp:
          description: |-
            Numeric timestamp in format `YYYYMMDDHHMMSSMMM`.

            Deprecated: Use `timestamp_str` instead.
          type: integer
          deprecated: true
        timestamp_str:
          description: Timestamp.
          allOf:
            - $ref: "#/components/schemas/DateTimeMs"
        compute_request_id:
          description: The ID of the compute request that was processed.
          type: string
        exports:
          description: Requested export versions.
          type: object
          additionalProperties:
            type: string
        outputs:
          description: Requested output versions.
          type: object
          additionalProperties:
            type: string
        params:
          description: Parameter values.
          type: object
        stats:
          description: The stats of the computation request.
          allOf:
            - $ref: "#/components/schemas/ResModelComputationStats"
        status:
          description: Result of processing request.
          allOf:
            - $ref: "#/components/schemas/ResComputationStatus"
        timestamp_fin:
          description: Timestamp when the computation request was finished.
          allOf:
            - $ref: "#/components/schemas/DateTimeMs"
        timestamp_req:
          description: Timestamp when the work request was filed.
          allOf:
            - $ref: "#/components/schemas/EpochMs"
        timestamp_req_iso:
          description: Timestamp when the computation request was filed.
          allOf:
            - $ref: "#/components/schemas/DateTimeMs"
        timestamp_resp:
          description: Timestamp when the computation request was picked up.
          allOf:
            - $ref: "#/components/schemas/DateTimeMs"
        msg:
          description: Message containing information about the computation process.
          type: string
        limit:
          description: Model's limits at the time of the computation process.
          allOf:
            - $ref: "#/components/schemas/ResComputationLimits"
        credits:
          description: The number of credits that are charged for this computation.
          type: number
      required:
        - id
        - timestamp
        - timestamp_str
        - compute_request_id
        - exports
        - outputs
        - params
        - stats
        - status
        - timestamp_fin
        - timestamp_req
        - timestamp_req_iso
        - timestamp_resp
    ResModelState:
      description: Definition of a Model-State.
      allOf:
        - $ref: "#/components/schemas/ResModelStateData"
        - type: object
          properties:
            id:
              description: ID of the Model-State.
              type: string
            modelId:
              description: ID of the ShapeDiver model.
              allOf:
                - $ref: "#/components/schemas/Uuid"
            createdate:
              description: Timestamp of creation of the Model-State.
              allOf:
                - $ref: "#/components/schemas/DateTimeIso"
            imageUrl:
              description: The URL of the Model-State image.
              type: string
          required:
            - id
            - modelId
            - createdate
    ResModelStateData:
      description: Parameter and additional data of a Model-State.
      type: object
      properties:
        parameters:
          description: A directory of parameter IDs and values.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ResParameterValue"
        data:
          description: Optional untyped data that holds additional information.
          type: object
          additionalProperties: true
      required:
        - parameters
    ResModelStateInfo:
      description: Basic information about a Model-State.
      type: object
      properties:
        id:
          description: ID of the Model-State.
          type: string
        parameters:
          description: A directory of parameter IDs and values.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ResParameterValue"
        hasImage:
          description: Indicates whether the Model-State includes an image.
          type: boolean
        hasGltf:
          description: Indicates whether the Model-State includes a glTF asset.
          type: boolean
        hasUsdz:
          description: Indicates whether the Model-State includes a USDZ asset.
          type: boolean
      required:
        - id
        - parameters
        - hasImage
        - hasGltf
        - hasUsdz
    ResBasicParameter:
      <<: *CommonsBasicParameter
    ResStypeParameter:
      <<: *CommonsStypeParameter
    ResParameterValue:
      description: >-
        The value of a single model parameter.

        Supported parameter values are:
        * Basic parameter (`ResBasicParameter`)
        * S-type parameter (`ResStypeParameter`)
      oneOf:
        - $ref: "#/components/schemas/ResBasicParameter"
        - $ref: "#/components/schemas/ResStypeParameter"
    ResModelComputationStats:
      description: Stats of a computation request.
      type: object
      properties:
        size_assets:
          description: Total size in bytes of the uncompressed resulting assets.
          type: integer
          minimum: 0
        size_assets_storage:
          description: >-
            Total size in bytes of the (potentially compressed) assets uploaded to storage.
          type: integer
          minimum: 0
        time_completion:
          description: The number of milliseconds it took to answer the request.
          type: integer
          minimum: 0
        time_model_download:
          description: >-
            The number of milliseconds it took to download the model from storage. `0` in case
            model was already downloaded to the instance.
          type: integer
          minimum: 0
        time_model_open:
          description: |-
            The number of milliseconds it took to  load (open) the model. `0` in case model was
            already loaded.

            Note: Does not include time for script compilation and first computation.
          type: integer
          minimum: 0
        time_processing:
          description: The number of milliseconds it took to process the request.
          type: integer
          minimum: 0
        time_check_stored:
          description: >-
            The number of milliseconds it took to carry out checks that are done before loading the
            model.
          type: integer
          minimum: 0
        time_check_loaded:
          description: >-
            The number of milliseconds it took to carry out check that are done after loading the
            model.
          type: integer
          minimum: 0
        time_storage:
          description: The number of milliseconds it took to upload assets to storage.
          type: integer
          minimum: 0
        time_solver:
          description: The number of milliseconds for Grasshopper solver.
          type: integer
          minimum: 0
        time_solver_collect:
          description: >-
            The number of milliseconds it took to collect output and export data after computation.
          type: integer
          minimum: 0
        time_solver_ext:
          description: >-
            The number of milliseconds it took to download and load the model and setting
            parameters, and to compute the solution.
          type: integer
          minimum: 0
        time_wait:
          description: The number of milliseconds the request was waiting before being processed.
          type: integer
          minimum: 0
        time_cache_outputs:
          description: >-
            The number of milliseconds it took to store the results of the request in the cache.
          type: integer
          minimum: 0
        model:
          description: Information about model computations.
          allOf:
            - $ref: "#/components/schemas/ResComputationComponents"
        cpu_time_check_stored:
          description: >-
            The number of milliseconds the CPU was used to carry out checks which are done before
            loading the model.
          type: integer
          minimum: 0
        cpu_time_check_loaded:
          description: >-
            The number of milliseconds the CPU was used to carry out checks which are done after
            loading the model.
          type: integer
          minimum: 0
        cpu_time_storage:
          description: The number of milliseconds the CPU was used to upload assets to storage.
          type: integer
          minimum: 0
        cpu_time_model_download:
          description: >-
            The number of milliseconds the CPU was used to download the model from storage.
          type: integer
          minimum: 0
        cpu_time_model_open:
          description: >-
            The number of milliseconds the CPU was used to  load (open) the model. `0` in case
            model was already loaded.
          type: integer
          minimum: 0
        cpu_time_solver:
          description: The number of milliseconds the CPU was used for Grasshopper solver.
          type: integer
          minimum: 0
        cpu_time_solver_collect:
          description: >-
            The number of milliseconds the CPU was used to collect output and export data after
            computation.
          type: integer
          minimum: 0
        cpu_time_solver_ext:
          description: >-
            The number of milliseconds the CPU was used to download and load the model and setting
            parameters, and to compute the solution.
          type: integer
          minimum: 0
        cpu_time_cache_outputs:
          description: >-
            The number of milliseconds the CPU was used to store the results of the request in the
            cache.
          type: integer
          minimum: 0
        time_model_prepare:
          description: >-
            The number of milliseconds it took to prepare the model after loading it. As an
            example, preparation includes compilation of scripts.
          type: integer
          minimum: 0
        cpu_time_model_prepare:
          description: >-
            The number of milliseconds the CPU was used to prepare the model after loading it. As
            an example, preparation includes compilation of scripts.
          type: integer
          minimum: 0
      required:
        - time_completion
        - time_model_download
        - time_model_open
        - time_processing
        - time_check_stored
        - time_check_loaded
        - time_solver
        - time_solver_ext
        - time_wait
    ResComputedComponent:
      type: object
      properties:
        instance:
          description: Instance ID of component.
          type: string
        component:
          description: ID of the component.
          type: string
        name:
          description: Name of component.
          type: string
        nick_name:
          description: Nickname of component.
          type: string
        time:
          description: Computation time used.
          type: number
          minimum: 0
      required:
        - instance
        - component
        - name
        - nick_name
        - time
    ResComputingComponent:
      type: object
      properties:
        instance:
          description: Instance ID of component.
          type: string
        component:
          description: ID of component.
          type: string
        name:
          description: Name of component.
          type: string
        nick_name:
          description: Nickname of component.
          type: string
      required:
        - instance
        - component
        - name
        - nick_name
    ResWarningComponent:
      type: object
      properties:
        component:
          description: ID of component.
          type: string
        instance:
          description: Instance ID of component.
          type: string
        name:
          description: Name of component.
          type: string
        nick_name:
          description: Nickname of component.
          type: string
        warnings:
          description: Component Warnings descriptions.
          type: array
          items:
            type: string
      required:
        - instance
        - name
        - nick_name
        - warnings
    ResErrorComponent:
      type: object
      properties:
        component:
          description: ID of component.
          type: string
        errors:
          description: Component Error descriptions.
          type: array
          items:
            type: string
        instance:
          description: Instance ID of component.
          type: string
        name:
          description: Name of component.
          type: string
        nick_name:
          description: Nickname of component.
          type: string
        warnings:
          description: Component Warnings descriptions.
          type: array
          items:
            type: string
      required:
        - component
        - errors
        - instance
        - name
        - nick_name
        - warnings
    ResComputationComponent:
      description: >-
        Information about the components taking most computation time in the model computations
        log.
      type: object
      properties:
        computed:
          description: Components which were computed, ordered by descending processor time.
          type: array
          items:
            $ref: "#/components/schemas/ResComputedComponent"
        computing:
          description: >-
            Components which were currently computing at the time the computation was stopped.
          type: array
          items:
            $ref: "#/components/schemas/ResComputingComponent"
        errors:
          description: Component Errors.
          type: array
          items:
            $ref: "#/components/schemas/ResErrorComponent"
        warnings:
          description: Component Warnings.
          type: array
          items:
            $ref: "#/components/schemas/ResWarningComponent"
      required:
        - computed
        - computing
        - errors
        - warnings
    ResComputationComponents:
      description: Information about model computations.
      type: object
      properties:
        components:
          $ref: "#/components/schemas/ResComputationComponent"
        count_success:
          description: Count of successful computations for the given loaded instance of the model.
          type: integer
          minimum: 0
        count_timeout:
          description: Count of timed-out computations for the given loaded instance of the model.
          type: integer
          minimum: 0
        changes:
          description: >-
            Lists the ids of the parameters whose values were changed before the computation.
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Uuid"
      required:
        - components
    ResComputationStatus: *CommonsComputationStatus
    ResComputationLimits:
      description: Limits of a model computation process.
      type: object
      properties:
        max_comp_time:
          description: Maximum computation time in milliseconds allowed for the model.
          type: integer
          minimum: 0
        max_output_size:
          description: Maximum output size in bytes allowed for the model.
          type: integer
          minimum: 0
        max_export_size:
          description: Maximum export size in bytes allowed for the model.
          type: integer
          minimum: 0
      required:
        - max_comp_time
        - max_output_size
        - max_export_size
    ResOutputDefinition:
      description: Output definition WITHOUT results as exposed on the API.
      type: object
      properties:
        id:
          description: >-
            ID of the output, dependent on model ID, and therefore changing each time a model gets
            uploaded.
          type: string
        uid:
          description: >-
            Constant ID of the output, not dependent on model ID, and therefore NOT changing each
            time a model gets uploaded. Might be undefined because this property was introduced in
            summer 2020 and does not exist for outputs of older models.
          allOf:
            - $ref: "#/components/schemas/Uuid"
        name:
          description: Name of the output.
          type: string
        material:
          description: Optional ID of the output holding material information for this output.
          type: string
        chunks:
          description: Information about which chunks exist in the asset/sdTF.
          type: array
          items:
            $ref: "#/components/schemas/ResOutputChunk"
        dependency:
          description: List of IDs of parameters influencing this output.
          type: array
          items:
            type: string
        group:
          title: ResOutputDefinitionGroup
          allOf:
            - $ref: "#/components/schemas/CommonsGroup"
            - description: Group information of an output definition.
        order:
          description: Ordering of the output in client applications.
          type: integer
        tooltip:
          description: Description that is shown as a tooltip in the clients.
          type: string
        displayname:
          description: Parameter name to display instead of `name`.
          type: string
        hidden:
          description: Controls whether the parameter should be hidden in the UI.
          type: boolean
        version: # Required to distinguish from ResOutput
          description: This property is never set.
          # FIXME: Workaround until OAS 3.1 - use `null` instead!
          type: boolean
          nullable: true
          deprecated: true
      required:
        - id
        - name
        - dependency
        - hidden
    ResOutput:
      description: Output definition WITH results as exposed on the API.
      allOf:
        - $ref: "#/components/schemas/ResOutputDefinition"
        - type: object
          properties:
            version:
              description: >-
                A unique identifier for the particular version of the output. This is a hash code
                which is based on the parameter values that were used to compute the resulting
                data. The hash code only depends on the values of the parameters which may
                theoretically influence the results of the output. As an example, parameters which
                are in no way connected to the output component in Grasshopper are not considered.
              type: string
            delay:
              description: |-
                The delay in milliseconds after which a cache request shall be sent to check again
                for this output version. This property is used ONLY if the output version has not
                been computed yet.

                Note that the existence of this property does not necessarily imply the presence of
                an active or queued computation for the respective output version.
              type: integer
              minimum: 0
            content:
              description: >-
                Result parts. In case this array does not exist, this means that the workers have
                not finished computation for this output version.
              type: array
              items:
                $ref: "#/components/schemas/ResOutputContent"
            bbmin:
              description: Optional bounding box, minimum corner.
              type: array
              items:
                type: number
            bbmax:
              description: Optional bounding box, maximum corner.
              type: array
              items:
                type: number
            msg:
              description: >-
                In case computation of the export version (temporarily) failed. Contains a message
                explaining what went wrong.
              type: string
            status_computation:
              description: Status of the computation which resulted in the output version.
              allOf:
                - $ref: "#/components/schemas/ResComputationStatus"
            status_collect:
              description: Status of collecting results for the output version.
              allOf:
                - $ref: "#/components/schemas/ResComputationStatus"
          required:
            - version
    ResOutputContent:
      description: An item of the `content` array for outputs.
      type: object
      properties:
        href:
          description: Optional link to asset.
          type: string
        size:
          description: Size in bytes for parts of type `asset`.
          type: integer
          minimum: 0
        name:
          description: Optionally used for type `data`.
          type: string
        transformations:
          description: Transformations to be applied in case of type `external` or `asset`.
          type: array
          items:
            type: array
            items:
              type: number
        format:
          description: |-
            Format of part, used by all types of parts.
            * File ending for parts of type `asset`.
            * `material` (data contains a material definition).
            * `data` (data contains arbitrary data).
            * `external` (href or storage information that refer to an external asset).
          type: string
        msg:
          description: >-
            This was used by legacy `transform_content_array` in case of an error in getting
            texture URLs.
          type: string
        data:
          description: Used for types `material` and `data`.
          allOf:
            - $ref: "#/components/schemas/AnyValue"
        contentType:
          description: Optional Content-Type for parts of type `asset`.
          type: string
      required:
        - format
    ResOutputChunk:
      description: >-
        Represents a collection of nodes where to start enumerating the content of the sdTF file
        (entry points).
      type: object
      properties:
        id:
          description: ID of the chunk.
          type: string
        name:
          description: Name of the chunk.
          type: string
        typeHint:
          description: Indicates what type of data the data item holds.
          type: string
        tooltip:
          description: Description that is shown as a tooltip in the clients.
          type: string
        displayname:
          description: Custom name to display instead of `name`. Empty string if not set.
          type: string
        hidden:
          description: Controls whether the chunk should be hidden in the UI.
          type: boolean
      required:
        - id
        - name
        - typeHint
        - displayname
        - hidden
    ResOutputOrDefinition:
      description: Either a full output or it's definition.
      oneOf:
        - $ref: "#/components/schemas/ResOutputDefinition"
        - $ref: "#/components/schemas/ResOutput"
    ResSettings:
      description: Definition of settings.
      type: object
      properties:
        auth:
          $ref: "#/components/schemas/ResAuthorizationSettings"
        compute:
          $ref: "#/components/schemas/ResComputeSettings"
        model:
          $ref: "#/components/schemas/ResModelSettings"
    ResAuthorizationSettings:
      type: object
      properties:
        ticket:
          $ref: "#/components/schemas/ResTicketAuthorization"
        token:
          $ref: "#/components/schemas/ResTokenAuthorization"
    ResTicketAuthorization:
      type: object
      properties:
        accessdomains:
          description: >-
            List of domains (origins) this model is limited to (is ignored in case `model.pub` is
            true).
          type: array
          items:
            type: string
        backendaccess:
          description: Should backend access to the model be allowed.
          type: boolean
        pub:
          description: If this model allows public access (ignore `model.accessdomains`)?
          type: boolean
      required:
        - accessdomains
        - backendaccess
        - pub
    ResTokenAuthorization:
      type: object
      properties:
        auth_groups:
          description: List of allowed auth-groups.
          type: array
          items:
            $ref: "#/components/schemas/Uuid"
        require_iframe:
          description: Enforces iframe embedding instead of direct embedding.
          type: boolean
        require_token:
          description: Enforces token-based authentication for this model.
          type: boolean
    ResComputeSettings:
      type: object
      properties:
        deny_scripts:
          description: Allows to control whether the model's Grasshopper file can contain scripts.
          type: boolean
        ftype:
          description: File type of the model.
          type: string
        initial_warmup:
          description: >-
            Allows to control whether the model should be warmed up immediately after loading by
            running a computation. This increases the likelihood of following computation requests
            to be faster.
          type: boolean
        max_comp_time:
          description: Maximum number of milliseconds allowed for computations of this model.
          type: integer
          minimum: 0
        max_export_size:
          description: >-
            Maximum number of bytes allowed to be exported from a model for a specific set of
            parameter values.
          type: integer
          minimum: 0
        max_idle_minutes:
          description: |-
            Maximum amount of minutes a loaded model may be unused before it gets unloaded.

            Note: Models may get unloaded earlier than that.
          type: integer
          minimum: 0
        max_model_size:
          description: Maximum number of bytes allowed for the model's Grasshopper file size.
          type: integer
          minimum: 0
        max_output_size:
          description: >-
            Maximum number of bytes allowed for an output of a model for a specific set of
            parameter values.
          type: integer
          minimum: 0
        max_texture_size:
          description: Maximum number of bytes allowed for a single texture.
          type: integer
          minimum: 0
        max_wait_time:
          description: >-
            Maximum time a computation request may stay waiting before a further worker goes ahead
            regardless of whether it already has the model loaded, and regardless of
            `num_loaded_max`. This allows to configure a soft or a hard upper boundary for the
            number of loaded models.
          type: integer
          minimum: 0
        num_loaded_max:
          description: >-
            Maximum number of workers that should have the model loaded at the same time.
          type: integer
          minimum: 0
        num_loaded_min:
          description: >-
            Minimum number of workers that should load the model and keep it open while there is
            session activity.
          type: integer
          minimum: 0
        num_preloaded_min:
          description: >-
            Minimum number of workers that should always have the model loaded, regardless of
            session activity. This allows to minimise the likelihood of computation requests being
            slower due to model loading.
          type: integer
          minimum: 0
        session_rate_limit:
          description: >-
            Limits the number of sessions that can be created by a specific IP address in one hour.
          type: integer
          minimum: 0
        trust:
          description: Controls whether failed computations will be retried.
          type: string
          pattern: "^(none|full)?$"
      required:
        - deny_scripts
        - ftype
        - initial_warmup
        - max_comp_time
        - max_export_size
        - max_idle_minutes
        - max_output_size
        - max_wait_time
        - num_loaded_max
        - num_loaded_min
        - num_preloaded_min
        - trust
    ResModelSettings:
      type: object
      properties:
        use_cdn:
          description: Allows the usage of the CDN for fast content distribution.
          type: boolean
        cdn_supported:
          description: Indicates if the model supports CDN-based asset URLs.
          type: boolean
        blockingReasons:
          title: ResModelBlockingReasons
          allOf:
            - $ref: "#/components/schemas/CommonsModelBlockingReasons"
            - type: object
              properties:
                pluginPermission:
                  description: >-
                    The model uses a Grasshopper plugin that is not allowed for the owner.
                  type: boolean
              required:
                - creditLimit
                - owner
                - pluginPermission
    ResSystem:
      description: ShapeDiver API response of system-request.
      type: object
      properties:
        minions:
          description: System information about the Geometry Minions.
          allOf:
            - $ref: "#/components/schemas/ResMinionInfo"
        workers:
          description: System information about the Geometry Workers.
          allOf:
            - $ref: "#/components/schemas/ResWorkerInfo"
    ResMinionInfo:
      description: Holds system information of all currently running Geometry Minion services.
      type: object
      properties:
        instances:
          description: Information per instance. A directory of process-IDs and process data.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ResMinionProcess"
        tasks:
          description: Aggregated task information. A directory of task types and task data.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ResMinionTask"
      required:
        - instances
        - tasks
    ResMinionProcess:
      description: System information a single Geometry Minions process.
      type: object
      properties:
        tasks:
          description: Information about completed tasks, listed per task type.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ResMinionTask"
      required:
        - tasks
    ResMinionTask:
      description: Statistics of a single Minion task.
      type: object
      properties:
        avgDuration:
          description: Average duration of the task in milliseconds.
          type: integer
          minimum: 0
        maxDuration:
          description: Maximum duration of the task in milliseconds.
          type: integer
          minimum: 0
        avgIntervalDiff:
          description: >-
            Average difference between the configured task interval and the last global task
            execution in milliseconds.
          type: integer
          minimum: 0
        maxIntervalDiff:
          description: >-
            Maximum difference between the configured task interval and the last global task
            execution in milliseconds.
          type: integer
          minimum: 0
        interval:
          description: Execution interval of this task type in milliseconds.
          type: integer
          minimum: 0
        latest:
          description: Timestamp of the latest task completion.
          allOf:
            - $ref: "#/components/schemas/DateTimeMs"
        count:
          description: The number of aggregated items.
          type: integer
          minimum: 0
      required:
        - avgDuration
        - maxDuration
        - avgIntervalDiff
        - maxIntervalDiff
        - interval
        - latest
        - count
    ResWorkerInfo:
      description: System information about the Geometry Workers.
      type: object
      properties:
        grasshopperVersion:
          description: Version of the Grasshopper application.
          type: string
        plugins:
          description: Holds information of all installed and allowed Grasshopper plugins.
          allOf:
            - $ref: "#/components/schemas/ResWorkerPlugins"
        rhinoVersion:
          description: Version of the Rhino application.
          type: string
        shapeDiverVersion:
          description: Version of the ShapeDiver worker plugin.
          type: string
      required:
        - grasshopperVersion
        - plugins
        - rhinoVersion
        - shapeDiverVersion
    ResWorkerPlugins:
      description: Holds information of all installed and allowed Grasshopper plugins.
      type: object
      properties:
        installed:
          description: Contains information about all installed Grasshopper plugins.
          type: array
          items:
            $ref: "#/components/schemas/ResInstalledWorkerPlugin"
        allowed:
          description: Contains the model checking configuration for the Grasshopper plugins.
          type: array
          items:
            $ref: "#/components/schemas/ResAllowedWorkerPlugin"
        inconsistent:
          description: Contains information about plugin inconsistencies.
          type: array
          items:
            type: string
      required:
        - installed
        - allowed
        - inconsistent
    ResInstalledWorkerPlugin:
      description: Contains information about all installed Grasshopper plugins.
      type: object
      properties:
        id:
          description: ID of the Grasshopper plugin.
          type: string
        name:
          description: Name of the Grasshopper plugin.
          type: string
        version:
          description: Version of the Grasshopper plugin.
          type: string
        authorName:
          description: Name of the plugin author.
          type: string
        authorContact:
          description: >-
            Contact information of the plugin author (homepage URL, email address, etc.).
          type: string
        description:
          description: General description of the Grasshopper plugin.
          type: string
        assemblyVersion:
          description: |-
            Assembly version of the Grasshopper plugin DLL.

            See the [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.reflection.assemblyname.version?view=net-8.0)
            for more information.
          type: string
        assemblyFullName:
          description: |-
            Full assembly name of the Grasshopper plugin DLL.

            See the [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.reflection.assembly.fullname?view=net-8.0)
            for more information.
          type: string
        isCoreLibrary:
          description: >-
            Gets whether this library is a Grasshopper core library. Core libraries are installed
            along with Grasshopper and thus should always be available anywhere.
          type: boolean
        license:
          description: |-
            The license type of the plugin.

            See the [documentation](https://developer.rhino3d.com/api/grasshopper/html/T_Grasshopper_Kernel_GH_LibraryLicense.htm)
            for more information.
          type: number
        loadingMechanism:
          description: |-
            The mechanism used to load the plugin.

            See the [documentation](https://developer.rhino3d.com/api/grasshopper/html/T_Grasshopper_Kernel_GH_LoadingMechanism.htm)
            for more information.
          type: number
        location:
          description: Installation path of the Grasshopper plugin.
          type: string
      required:
        - id
        - name
        - version
        - authorName
        - authorContact
        - description
        - assemblyVersion
        - assemblyFullName
        - isCoreLibrary
        - license
        - loadingMechanism
        - location
    ResAllowedWorkerPlugin:
      description: Contains the model checking configuration for the Grasshopper plugins.
      type: object
      properties:
        id:
          description: ID of the Grasshopper plugin.
          type: string
        name:
          description: Name of the Grasshopper plugin.
          type: string
        minVersion:
          description: Minimum supported version of the plugin.
          type: string
        maxVersion:
          description: Maximum supported version of the plugin.
          type: string
        authorName:
          description: Name of the plugin author.
          type: string
        description:
          description: Link to a website related to the plugin.
          type: string
        href:
          description: Link to a website related to the plugin.
          type: string
        allowFallbackToAssemblyVersion:
          description: |-
            When `true` then `GH_AssemblyInfo.AssemblyVersion` may be used instead of
            `GH_AssemblyInfo.Version` for version checking.

            Defaults to `false`.
          type: boolean
        checkMajorMinorVersionOnly:
          description: |-
            When `true` then only the major and minor version numbers recorded in Grasshopper
            models will be checked.

            Defaults to `false`.
          type: boolean
        checkIfInstalled:
          description: |-
            When `false` then the installation check of the plugin will be skipped.

            Defaults to `true`.
          type: boolean
        previousIds:
          description: >-
            List of previous plugin IDs supported by this plugin version. This is used for the
            obscure case of the plugin developer changing the plugin ID.
          type: array
          items:
            type: string
        allowedComponents:
          description: >-
            List of plugin components that are explicitly allowed. When this property is set, only
            the listed components are allowed, overruling the list in `disallowedComponents`.
          type: array
          items:
            $ref: "#/components/schemas/ResWorkerPluginComponent"
        disallowedComponents:
          description: >-
            List of plugin components which may not be used. This list might be overruled by
            `allowedComponents`.
          type: array
          items:
            $ref: "#/components/schemas/ResWorkerPluginComponent"
      required:
        - id
        - name
        - minVersion
        - maxVersion
        - allowFallbackToAssemblyVersion
        - checkMajorMinorVersionOnly
        - checkIfInstalled
        - previousIds
        - allowedComponents
        - disallowedComponents
    ResWorkerPluginComponent:
      description: A Grasshopper plugin component that may not be used.
      type: object
      properties:
        id:
          description: ID of the plugin component.
          type: string
        name:
          description: Name of the plugin component.
          type: string
      required:
        - id
        - name
    ResError:
      description: Body of an error object.
      type: object
      properties:
        error:
          description: The type of the error.
          allOf:
            - $ref: "#/components/schemas/ResErrorType"
        desc:
          description: General description of the error type.
          type: string
        message:
          description: Detailed error description.
          type: string
      required:
        - error
        - desc
    ResErrorType:
      description: Possible error types.
      type: string
      enum:
        - SdAssertionError
        - SdCacheErrorGeneric
        - SdConnectorError
        - SdDatabaseErrorGeneric
        - SdEmailingError
        - SdErrorEntityNotFound
        - SdErrorForbidden
        - SdErrorGenericClient
        - SdErrorGenericInternal
        - SdErrorUnauthorized
        - SdIllegalArgumentError
        - SdJwtValidationError
        - SdMethodNotAllowedError
        - SdModelValidationError
        - SdNotAcceptable
        - SdNotFoundError
        - SdParameterValidationError
        - SdRateLimitErrorGeneric
        - SdRequestTimeout
        - SdRequestValidationError
        - SdResourceGoneError
        - SdSessionGoneError
        - SdSessionValidationError
        - SdStorageErrorGeneric
        - SdTextureUrlError
        - SdTicketValidationError
        - SdTokenMissingError
        - SdTransformContentArrayError
        - SdUnconfirmedModelError
        - ""
      x-enum-varnames:
        - ASSERTION_ERROR
        - CACHE_ERROR_GENERIC
        - CONNECTOR_ERROR
        - DATABASE_ERROR_GENERIC
        - EMAILING_ERROR
        - ERROR_ENTITY_NOT_FOUND
        - ERROR_FORBIDDEN
        - ERROR_GENERIC_CLIENT
        - ERROR_GENERIC_INTERNAL
        - ERROR_UNAUTHORIZED
        - ILLEGAL_ARGUMENT_ERROR
        - JWT_VALIDATION_ERROR
        - METHOD_NOT_ALLOWED_ERROR
        - MODEL_VALIDATION_ERROR
        - NOT_ACCEPTABLE
        - NOT_FOUND_ERROR
        - PARAMETER_VALIDATION_ERROR
        - RATE_LIMIT_ERROR_GENERIC
        - REQUEST_TIMEOUT
        - REQUEST_VALIDATION_ERROR
        - RESOURCE_GONE_ERROR
        - SESSION_GONE_ERROR
        - SESSION_VALIDATION_ERROR
        - STORAGE_ERROR_GENERIC
        - TEXTURE_URL_ERROR
        - TICKET_VALIDATION_ERROR
        - TOKEN_MISSING_ERROR
        - TRANSFORM_CONTENT_ARRAY_ERROR
        - UNCONFIRMED_MODEL_ERROR
        - UNKNOWN

  #---------------------------------------------------------------------------#
  #- Security types                                                          -#
  #---------------------------------------------------------------------------#
  securitySchemes:
    JwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    CredentialsAuth:
      type: http
      scheme: basic

###############################################################################
# Paths                                                                       #
###############################################################################
paths:
  #---------------------------------------------------------------------------#
  #- Analytics                                                               -#
  #---------------------------------------------------------------------------#
  "/api/v2/analytics/session/model":
    put:
      operationId: GetModelStatistics
      tags:
        - analytics
      summary: Get model session analytics.
      description: |-
        Permissions: 
        * `analytics.model.get.*` - __required__.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqModelStatistics"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetModelStatistics"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/analytics/credit-metrics":
    put:
      operationId: GetCreditMetrics
      tags:
        - analytics
      summary: Get credit metrics.
      description: |-
        Subject-Restriction: __backend__ - ONLY for _system-metrics_.

        Permissions: 
        * `analytics.model.get.*` - __required__.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqCreditMetrics"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetCreditMetrics"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/analytics/credit-metrics/timestamp/{timestamp}/user":
    get:
      operationId: GetUserCreditMetrics
      tags:
        - analytics
      summary: Get credit metrics of all users active at timestamp.
      description: |-
        Subject-Restriction: __backend__.

        Permissions: 
        * `analytics.model.get.*` - __required__.
      parameters:
        - in: path
          name: timestamp
          schema:
            type: string
          required: true
          description: Timestamp of activity in format YYYY, YYYYMM, YYYYMMDD, or YYYYMMDDHH.
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetUserCreditMetrics"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/analytics/credit-metrics/timestamp/{timestamp}/org":
    get:
      operationId: GetOrganizationCreditMetrics
      tags:
        - analytics
      summary: Get credit metrics of all organizations with users active at timestamp.
      description: |-
        Subject-Restriction: __backend__.

        Permissions: 
        * `analytics.model.get.*` - __required__.
      parameters:
        - in: path
          name: timestamp
          schema:
            type: string
          required: true
          description: Timestamp of activity in format YYYY, YYYYMM, YYYYMMDD, or YYYYMMDDHH.
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetOrganizationCreditMetrics"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/analytics/credit-metrics/timestamp/{timestamp}/user/{userId}":
    get:
      operationId: GetModelUserCreditMetrics
      tags:
        - analytics
      summary: Get model credit metrics of the user at timestamp.
      description: |-
        Permissions: 
        * `analytics.model.get.*` - __required__.
      parameters:
        - in: path
          name: timestamp
          schema:
            type: string
          required: true
          description: Timestamp of activity in format YYYY, YYYYMM, YYYYMMDD, or YYYYMMDDHH.
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of the user.
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetModelUserCreditMetrics"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/analytics/credit-metrics/timestamp/{timestamp}/org/{orgId}":
    get:
      operationId: GetModelOrganizationCreditMetrics
      tags:
        - analytics
      summary: Get model credit metrics of the organization at timestamp.
      description: |-
        Permissions: 
        * `analytics.model.get.*` - __required__.
      parameters:
        - in: path
          name: timestamp
          schema:
            type: string
          required: true
          description: Timestamp of activity in format YYYY, YYYYMM, YYYYMMDD, or YYYYMMDDHH.
        - in: path
          name: orgId
          schema:
            type: string
          required: true
          description: ID of the organization.
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetModelOrganizationCreditMetrics"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []

  #---------------------------------------------------------------------------#
  #- AR-Scene                                                                -#
  #---------------------------------------------------------------------------#
  "/api/v2/ar-scene/{sceneId}":
    head:
      operationId: GetArSceneMetadata
      tags:
        - ar-scene
      summary: Verifies whether an AR scene exists or if a Model-State is linked to an AR scene.
      parameters:
        - name: sceneId
          in: path
          description: ID of the AR scene or Model-State.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The AR scene was found or the Model-State is linked to an AR scene.
        404:
          description: The AR scene does not exist or the Model-State is not linked to an AR scene.
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security: []
  "/api/v2/ar-scene/{sceneId}/gltf":
    get:
      operationId: DownloadArSceneGltf
      tags:
        - ar-scene
      summary: Downloads the glTF asset of an AR scene or a Model-State that is linked to an AR scene.
      parameters:
        - name: sceneId
          in: path
          description: ID of the AR scene or Model-State.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/OctetStream"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security: []
  "/api/v2/ar-scene/{sceneId}/usdz":
    get:
      operationId: DownloadArSceneUsdz
      tags:
        - ar-scene
      summary: Downloads the USDZ asset of an AR scene or a Model-State that is linked to an AR scene.
      parameters:
        - name: sceneId
          in: path
          description: ID of the AR scene or Model-State.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/OctetStream"
        302:
          description: Redirect to a temporary download link.
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security: []

  #---------------------------------------------------------------------------#
  #- Assets                                                                  -#
  #---------------------------------------------------------------------------#
  "/api/v2/session/{sessionId}/export/{assetDataEncrypted}":
    get:
      operationId: DownloadExport
      tags:
        - assets
      summary: Download a single export.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: assetDataEncrypted
          in: path
          description: Encrypted asset data information.
          required: true
          schema:
            $ref: "#/components/schemas/Base64Data"
      responses:
        200:
          description: Success.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/OctetStream"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/session/{sessionId}/output/{assetDataEncrypted}":
    get:
      operationId: DownloadOutput
      tags:
        - assets
      summary: Download a single output.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: assetDataEncrypted
          in: path
          description: Encrypted asset data information.
          required: true
          schema:
            $ref: "#/components/schemas/Base64Data"
      responses:
        206:
          description: Success.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/OctetStream"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/session/{sessionId}/texture/{assetDataEncrypted}":
    get:
      operationId: DownloadTexture
      tags:
        - assets
      summary: Download a single texture.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: assetDataEncrypted
          in: path
          description: Encrypted asset data information.
          required: true
          schema:
            $ref: "#/components/schemas/Base64Data"
      responses:
        200:
          description: Success.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/OctetStream"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/session/{sessionId}/gltf/{assetDataEncrypted}":
    get:
      operationId: DownloadGltf
      tags:
        - assets
      summary: Download a glTF file.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: assetDataEncrypted
          in: path
          description: Encrypted asset data information.
          required: true
          schema:
            $ref: "#/components/schemas/Base64Data"
      responses:
        200:
          description: Success.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/OctetStream"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/session/{sessionId}/usdz/{assetDataEncrypted}":
    get:
      operationId: DownloadUsdz
      tags:
        - assets
      summary: Download a USDZ file.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: assetDataEncrypted
          in: path
          description: Encrypted asset data information.
          required: true
          schema:
            $ref: "#/components/schemas/Base64Data"
      responses:
        302:
          description: Redirect to a temporary download link.
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/session/{sessionId}/image":
    get:
      operationId: DownloadImage
      tags:
        - assets
      summary: Download an image.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: url
          in: query
          description: Specify the Base64-encoded image URL.
          required: true
          schema:
            $ref: "#/components/schemas/Base64Data"
      responses:
        200:
          description: Success.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/OctetStream"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/download/{assetDataEncrypted}":
    get:
      operationId: DownloadAsset
      tags:
        - assets
      summary: >-
        Download an asset without a session (can be used via an URL in an
        email).
      parameters:
        - name: assetDataEncrypted
          in: path
          description: Encrypted asset data information.
          required: true
          schema:
            $ref: "#/components/schemas/Base64Data"
      responses:
        200:
          description: Success.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/OctetStream"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security: []

  #---------------------------------------------------------------------------#
  #- Auth                                                                    -#
  #---------------------------------------------------------------------------#
  "/.well-known/jwks.json":
    get:
      operationId: GetJsonWebKeySets
      tags:
        - auth
      summary: Get the public keys of the JSON Web Key Set.
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                type: object
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security: []

  #---------------------------------------------------------------------------#
  #- Authorization Group                                                     -#
  #---------------------------------------------------------------------------#
  "/api/v2/auth_group":
    post:
      operationId: CreateAuthorizationGroup
      tags:
        - auth-group
      summary: Create new authorization group.
      description: |-
        Subject-Restriction: __backend__.

        Permissions: 
        * `auth_group.create` - __required__.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqAuthorizationGroup"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResCreateAuthorizationGroup"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []

  #---------------------------------------------------------------------------#
  #- Export                                                                  -#
  #---------------------------------------------------------------------------#
  "/api/v2/session/{sessionId}/export":
    put:
      operationId: ComputeExports
      tags:
        - export
      summary: Compute a Grasshopper exports for given parameter values.
      description: |-
        Permissions: 
        * `compute.export.*` - __required__.
        * `compute.output.*` - __required__ when _outputs_ are requested.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqExport"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResComputeExports"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/session/{sessionId}/export/cache":
    put:
      operationId: GetCachedExports
      tags:
        - export
      summary: Get Export from cache / check if computation is done.
      description: |-
        Permissions: 
        * `cache.export.get.*` - __required__.
        * `cache.output.get.*` - __required__ when _outputs_ are requested.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqExportOrCache"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetCachedExports"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/model/{modelId}/export":
    patch:
      operationId: UpdateExportDefinitions
      tags:
        - export
      summary: Update definition of exports.
      description: |-
        Permissions: 
        * `set.export.ui` - __required__.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqExportDefinitions"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResUpdateExportDefinitions"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/session/{sessionId}/export/{exportId}/list":
    get:
      operationId: ListExportVersions
      tags:
        - export
      summary: List export versions.
      description: |-
        Permissions: 
        * `cache.export.list.*` - __required__.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: exportId
          in: path
          description: Export ID.
          required: true
          schema:
            type: string
        - name: statusComputation
          in: query
          description: Filter export versions by `status_computation`.
          required: false
          schema:
            $ref: "#/components/schemas/QueryComputationStatus"
        - name: statusCollect
          in: query
          description: Filter export versions by `status_collect`.
          required: false
          schema:
            $ref: "#/components/schemas/QueryComputationStatus"
        - name: offset
          in: query
          description: Continuation token for pagination.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResListExportVersions"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []

  #---------------------------------------------------------------------------#
  #- File                                                                    -#
  #---------------------------------------------------------------------------#
  "/api/v2/session/{sessionId}/file/{paramId}/list":
    get:
      operationId: ListFiles
      tags:
        - file
      summary: List all file-assets of a parameter.
      description: |-
        Permissions:  
        * `asset.file.list.*` - __required__.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: paramId
          in: path
          description: Parameter ID of the file asset.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: offset
          in: query
          description: Continuation token for pagination.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResListFiles"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/session/{sessionId}/file/{paramId}/{fileId}":
    head:
      operationId: GetFileMetadata
      tags:
        - file
      summary: Get information about a file-asset of a parameter.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: paramId
          in: path
          description: Parameter ID of the file asset.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: fileId
          in: path
          description: ID of the file asset.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        200:
          description: The file-asset with the given ID was found.
        400:
          description: The file-asset with the given ID does not exist.
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
    get:
      operationId: DownloadFile
      tags:
        - file
      summary: Download a file-asset.
      description: |-
        Permissions: 
        * `asset.file.get.*` - __required__.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: paramId
          in: path
          description: Parameter ID of the file asset.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: fileId
          in: path
          description: ID of the file asset.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        200:
          description: Success.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/OctetStream"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
    delete:
      operationId: DeleteFile
      tags:
        - file
      summary: Delete a file-asset.
      description: |-
        Permissions: 
        * `asset.file.delete.*` - __required__.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: paramId
          in: path
          description: Parameter ID of the file asset.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: fileId
          in: path
          description: ID of the file asset.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResDeleteFile"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/session/{sessionId}/file/upload":
    post:
      operationId: UploadFile
      tags:
        - file
      summary: Request upload URL for a file-asset.
      description: |-
        Permissions: 
        * `asset.file.create.*` - __required__.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqFileUpload"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResUploadFile"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []

  #---------------------------------------------------------------------------#
  #- gltf                                                                    -#
  #---------------------------------------------------------------------------#
  "/api/v2/session/{sessionId}/gltf":
    post:
      operationId: UploadGltf
      tags:
        - gltf
      summary: Upload and optionally convert a glTF object.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: conversion
          in: query
          description: Specify to convert the uploaded glTF.
          required: false
          schema:
            $ref: "#/components/schemas/QueryGltfConversion"
      requestBody:
        required: true
        content:
          model/gltf-binary:
            schema:
              $ref: "#/components/schemas/OctetStream"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResUploadGltf"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []

  #---------------------------------------------------------------------------#
  #- Log                                                                     -#
  #---------------------------------------------------------------------------#
  "/api/v2/session/{sessionId}/log/message":
    post:
      operationId: LogMessage
      tags:
        - log
      summary: Log message.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqLogMessage"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResLogMessage"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []

  #---------------------------------------------------------------------------#
  #- Model                                                                   -#
  #---------------------------------------------------------------------------#
  "/api/v2/model/{modelId}/config":
    get:
      operationId: GetModelConfig
      tags:
        - model
      summary: Get model config.
      description: |-
        Permissions: 
        * `setting.viewer.get.*` - __required__.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetModelConfig"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
    post:
      operationId: CreateModelConfig
      tags:
        - model
      summary: Create model config.
      description: |-
        Permissions: 
        * `setting.viewer.set.*` - __required__.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqConfigure"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResCreateModelConfig"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
    patch:
      operationId: UpdateModelConfig
      tags:
        - model
      summary: Update model config.
      description: |-
        Updating the model configuration requires _model authoring privilege_.

        Permissions: 
        * `setting.viewer.set.*` - __required__.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqConfigure"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResUpdateModelConfig"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/model/list":
    get:
      operationId: ListModels
      tags:
        - model
      summary: List models.
      description: |-
        Subject-Restriction: __backend__.
      parameters:
        - name: modelStatus
          in: query
          description: Filter models by `stat`.
          required: false
          schema:
            $ref: "#/components/schemas/QueryModelStatus"
        - name: offset
          in: query
          description: Continuation token for pagination.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResListModels"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/model/{modelId}":
    get:
      operationId: GetModel
      tags:
        - model
      summary: Get model.
      description: |-
        Permissions: 
        * `setting.auth.ticket.get.*` - optional: adds _settings.auth.ticket_.
        * `setting.auth.token.get.*` - optional: adds _settings.auth.token_.
        * `setting.compute.get.*` - optional: adds _settings.compute_.
        * `file.upload` - optional: adds _file.upload_.
        * `file.download` - optional: adds _file.download_.
        * `get.statistic.*` - optional: adds _statistic_.
        * `setting.viewer.get.*` - optional: adds _viewer_.
        * `get.parameter.*` - optional: adds _parameters_.
        * `get.output*` - optional: adds _output definitions_.
        * `get.export*` - optional: adds _export definitions_.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetModel"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
    put:
      operationId: UpdateModel
      tags:
        - model
      summary: Update model.
      description: |-
        Permissions: 
        * `setting.auth.ticket.get.*` - optional: adds _settings.auth.ticket_ to response.
        * `setting.auth.token.get.*` - optional: adds _settings.auth.token_ to response.
        * `setting.compute.get.*` - optional: adds _settings.compute_ to response.
        * `file.upload` - optional: adds _file.upload_ to response.
        * `file.download` - optional: adds _file.download_ to response.
        * `get.statistic.*` - optional: adds _statistic_ to response.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqModel"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResUpdateModel"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
    delete:
      operationId: DeleteModel
      tags:
        - model
      summary: Delete model.
      description: |-
        Subject-Restriction: __backend__.

        Permissions: 
        * `delete.soft` - __required__.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResDeleteModel"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/model":
    post:
      operationId: CreateModel
      tags:
        - model
      summary: Create model.
      description: |-
        Subject-Restriction: __backend__.

        Permissions:
        * `create` - __required__
        * `setting.auth.ticket.get.*` - optional: adds _settings.auth.ticket_ to response.
        * `setting.auth.token.get.*` - optional: adds _settings.auth.token_ to response.
        * `setting.compute.get.*` - optional: adds _settings.compute_ to response.
        * `file.upload` - optional: adds _file.upload_ to response if no model has already been
          uploaded.
        * `file.download` - optional: adds _file.download_ to response.
        * `get.statistic.*` - optional: adds _statistic_ to response.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqModel"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResCreateModel"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/model/{modelId}/restore":
    put:
      operationId: RestoreModel
      tags:
        - model
      summary: Restore a soft-deleted model.
      description: "Subject-Restriction: __backend__."
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResDeleteModel"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/model/{modelId}/file/download":
    get:
      operationId: DownloadModelFile
      tags:
        - model
      summary: Download Grasshopper file.
      description: |-
        Permissions:  
        * `file.download` - __required__.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        200:
          description: Success.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/OctetStream"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/model/{modelId}/computations":
    get:
      operationId: GetModelComputations
      tags:
        - model
      summary: Get model computation statistics.
      description: |-
        Permissions:  
        * `analytics.model.get.*` - __required__.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: order
          in: query
          description: |-
            Order in which to query computation stats items.

            _Default:_ `desc`
          required: false
          schema:
            $ref: "#/components/schemas/QueryOrder"
        - name: timestamp_from
          in: query
          description: |-
            Timestamp to query from.

            _Default:_ `0`
          required: false
          schema:
            $ref: "#/components/schemas/DateTimeMs"
        - name: timestamp_to
          in: query
          description: |-
            Timestamp to query to.

            _Default:_ `infinity`
          required: false
          schema:
            $ref: "#/components/schemas/DateTimeMs"
        - name: status
          in: query
          description: |-
            Filter computations by the result status.

            _Default:_ `*`
          required: false
          schema:
            $ref: "#/components/schemas/QueryComputationStatisticsStatus"
        - name: type
          in: query
          description: |-
            Filter computations by type.

            _Default:_ `*`
          required: false
          schema:
            $ref: "#/components/schemas/QueryComputationType"
        - name: limit
          in: query
          description: |-
            How many items to return at most.

            _Default:_ `100`
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: strict_limit
          in: query
          description: |-
            Whether the limit shall be attained (if there are enough items).

            _Default:_ `false`
          required: false
          schema:
            type: boolean
        - name: offset
          in: query
          description: Continuation token for pagination.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetModelComputations"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/model/{modelId}/cleanup/export":
    post:
      operationId: CleanupExports
      tags:
        - model
      summary: Delete old export components.
      description: |-
        Permissions: 
        * `cache.export.delete.*` - __required__.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: untilLastSeen
          in: query
          description: Delete all components that have been used last at or before this timestamp.
          required: true
          schema:
            $ref: "#/components/schemas/AnyDateTime"
      responses:
        200:
          description: Cleanup successfully processed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResCleanupExports"
        202:
          description: Cleanup started but not finished yet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResCleanupExports"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/model/{modelId}/cleanup/output":
    post:
      operationId: CleanupOutputs
      tags:
        - model
      summary: Delete old output components.
      description: |-
        Permissions:  
        * `cache.output.delete.*` - __required__.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: untilLastSeen
          in: query
          description: Delete all components that have been used last at or before this timestamp.
          required: true
          schema:
            $ref: "#/components/schemas/AnyDateTime"
      responses:
        200:
          description: Cleanup successfully processed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResCleanupOutputs"
        202:
          description: Cleanup started but not finished yet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResCleanupOutputs"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/model/{modelId}/cleanup/texture":
    post:
      operationId: CleanupTextures
      tags:
        - model
      summary: Delete old texture components.
      description: |-
        Permissions: 
        * `cache.texture.delete.*` - __required__.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: untilLastSeen
          in: query
          description: Delete all components that have been used last at or before this timestamp.
          required: true
          schema:
            $ref: "#/components/schemas/AnyDateTime"
      responses:
        200:
          description: Cleanup successfully processed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResCleanupTextures"
        202:
          description: Cleanup started but not finished yet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResCleanupTextures"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/model/{modelId}/cleanup/status":
    get:
      operationId: GetCleanupStatus
      tags:
        - model
      summary: Get the status of all running model cleanup processes.
      description: ""
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetCleanupStatus"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/model/{modelId}/parameter/defval":
    patch:
      operationId: UpdateParameterDefaultValues
      tags:
        - model
      summary: Update default value of parameters.
      description: |-
        Updating default parameter values requires model authoring privilege.

        Permissions:  
        * `set.parameter.defval` - __required__.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqCustomization"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResUpdateParameterDefaultValues"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/model/{modelId}/parameter":
    patch:
      operationId: UpdateParameterDefinitions
      tags:
        - model
      summary: Update definition of parameters.
      description: |-
        Permissions: 
        * `set.parameter.ui` - __required__.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqParameterDefinitions"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResUpdateParameterDefinitions"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []

  #---------------------------------------------------------------------------#
  #- Model-State                                                             -#
  #---------------------------------------------------------------------------#
  "/api/v2/model-state/{modelStateId}":
    head:
      operationId: GetModelStateMetadata
      tags:
        - model-state
      summary: Checks the existence of a Model-State.
      parameters:
        - name: modelStateId
          in: path
          description: Model-State ID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The Model-State with the given ID was found.
        404:
          description: The Model-State with the given ID does not exist.
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security: []
    get:
      operationId: GetModelState
      tags:
        - model-state
      summary: Get a Model-State.
      parameters:
        - name: modelStateId
          in: path
          description: Model-State ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetModelState"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
    delete:
      operationId: DeleteModelState
      tags:
        - model-state
      summary: Delete a Model-State.
      description: |-
        Subject-Restriction: __backend__.
      parameters:
        - name: modelStateId
          in: path
          description: Model-State ID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResDeleteModelState"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/model-state/{modelStateId}/data":
    get:
      operationId: GetModelStateData
      tags:
        - model-state
      summary: Get a Model-State's parameter and additional data.
      parameters:
        - name: modelStateId
          in: path
          description: Model-State ID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetModelStateData"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
  "/api/v2/model-state/{modelStateId}/image":
    head:
      operationId: GetModelStateImageMetadata
      tags:
        - model-state
      summary: Checks if the Model-State has an image.
      parameters:
        - name: modelStateId
          in: path
          description: Model-State ID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The Model-State has an image.
        404:
          description: The Model-State does not have an image.
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security: []
    get:
      operationId: DownloadModelStateImage
      tags:
        - model-state
      summary: Downloads the Model-State image.
      parameters:
        - name: modelStateId
          in: path
          description: Model-State ID.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/OctetStream"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security: []
  "/api/v2/model-state/model/{modelId}/list":
    get:
      operationId: ListModelStates
      tags:
        - model-state
      summary: List Model-States of a ShapeDiver model.
      description: |-
        Subject-Restriction: __backend__.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: Continuation token for pagination.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResListModelStates"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/session/{sessionId}/model-state":
    post:
      operationId: CreateModelState
      tags:
        - model-state
      summary: Create new Model-State.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqModelState"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResCreateModelState"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []

  #---------------------------------------------------------------------------#
  #- Output                                                                  -#
  #---------------------------------------------------------------------------#
  "/api/v2/session/{sessionId}/output":
    put:
      operationId: ComputeOutputs
      tags:
        - output
      summary: Compute all outputs for given parameter values.
      description: |-
        Permissions:  
        * `compute.output.*` - __required__.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqCustomization"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResComputeOutputs"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/session/{sessionId}/output/cache":
    put:
      operationId: GetCachedOutputs
      tags:
        - output
      summary: Get output from cache / check if computation is done.
      description: |-
        Permissions: 
        * `cache.output.get.*` - __required__.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqCustomizationOrCache"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetCachedOutputs"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/model/{modelId}/output":
    patch:
      operationId: UpdateOutputDefinitions
      tags:
        - output
      summary: Update definition of outputs.
      description: |-
        Permissions: 
        * `set.output.ui` - __required__.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqOutputDefinitions"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResUpdateOutputDefinitions"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/session/{sessionId}/output/{outputId}/list":
    get:
      operationId: ListOutputVersions
      tags:
        - output
      summary: List output versions.
      description: |-
        Permissions: 
        * `cache.output.list.*` - __required__.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: outputId
          in: path
          description: Output ID.
          required: true
          schema:
            type: string
        - name: statusComputation
          in: query
          description: Filter output versions by `status_computation`.
          required: false
          schema:
            $ref: "#/components/schemas/QueryComputationStatus"
        - name: statusCollect
          in: query
          description: Filter output versions by `status_collect`.
          required: false
          schema:
            $ref: "#/components/schemas/QueryComputationStatus"
        - name: offset
          in: query
          description: Continuation token for pagination.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResListOutputVersions"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []

  #---------------------------------------------------------------------------#
  #- Script                                                                  -#
  #---------------------------------------------------------------------------#
  "/api/v2/script/{scriptId}/confirm":
    get:
      operationId: ConfirmScript
      tags:
        - script
      summary: Confirm script.
      description: |-
        Permissions:  
        * `script.confirm.*` - __required__.
      parameters:
        - name: scriptId
          in: path
          description: Script ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        200:
          description: Success.
          content:
            text/html:
              schema:
                type: string
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - CredentialsAuth: []
  "/api/v2/script/{scriptId}/deny":
    get:
      operationId: DenyScript
      tags:
        - script
      summary: Deny script.
      description: |-
        Permissions:  
        * `script.deny.*` - __required__.
      parameters:
        - name: scriptId
          in: path
          description: Script ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        200:
          description: Success.
          content:
            text/html:
              schema:
                type: string
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - CredentialsAuth: []

  #---------------------------------------------------------------------------#
  #- sdtf                                                                    -#
  #---------------------------------------------------------------------------#
  "/api/v2/session/{sessionId}/sdtf/{namespace}/list":
    get:
      operationId: ListSdtfs
      tags:
        - sdtf
      summary: List all sdTF-assets of a namespace.
      description: |-
        Permissions: 
        * `asset.sdtf.list.*` - __required__.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: namespace
          in: path
          description: Namespace of the sdTF asset.
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: Continuation token for pagination.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResListSdtfs"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/session/{sessionId}/sdtf/{namespace}/{sdtfId}":
    get:
      operationId: DownloadSdtf
      tags:
        - sdtf
      summary: Download a sdTF-asset.
      description: |-
        Permissions: 
        * `asset.sdtf.get.*` - __required__.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: namespace
          in: path
          description: Namespace of the sdTF asset.
          required: true
          schema:
            type: string
        - name: sdtfId
          in: path
          description: ID of the sdTF asset.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        200:
          description: Success.
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/OctetStream"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
    delete:
      operationId: DeleteSdtf
      tags:
        - sdtf
      summary: Delete a sdTF-assets.
      description: |-
        Permissions: 
        * `asset.sdtf.delete.*` - __required__.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: namespace
          in: path
          description: Namespace of the sdTF asset.
          required: true
          schema:
            type: string
        - name: sdtfId
          in: path
          description: ID of the sdTF asset.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResDeleteSdtf"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/session/{sessionId}/sdtf/upload":
    post:
      operationId: UploadSdtf
      tags:
        - sdtf
      summary: Request upload URL for a sdTF-asset.
      description: |-
        Permissions:  
        * `asset.sdtf.create.*` - __required__.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # $ref: '#/components/schemas/ReqSdtfUpload'
              description: Body of a sdTF upload request.
              type: array
              items:
                $ref: "#/components/schemas/ReqSdtfDefinition"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResUploadSdtf"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []

  #---------------------------------------------------------------------------#
  #- Session                                                                 -#
  #---------------------------------------------------------------------------#
  "/api/v2/model/{modelId}/session":
    post:
      operationId: CreateSessionByModel
      tags:
        - session
      summary: Initialize new session by model ID.
      description: |-
        Permissions: 
        * `auth.session` - __required__.
        * `get.parameter.*` - optional: adds _parameters_ to response.
        * Output: 
          * If body contains a computation request: `compute.output.*` - __required__.
          * If no computation request: `compute.output.*` - optional: adds _output for default
            parameter_ to response.
          * otherwise tries: `get.output.*` - optional: adds _output definitions_ to response.
        * Export:  
          * Body contains an export request: `compute.export.*` - __required__.
          * No export request: `get.export.*` - optional: adds _export definitions_ to response.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: modelStateId
          in: query
          description: ID of the Model-State to apply.
          required: false
          schema:
            type: string
        - name: strictValidation
          in: query
          description: |-
            When `false`, any Model-State parameter that cannot be applied to the model is ignored.
            However, when set to `true`, any validation error will result in an error response.

            Defaults to `false`.
          required: false
          schema:
            type: boolean
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqCustomizationOrExport"
      responses:
        201:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResCreateSessionByModel"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/ticket/{ticketId}":
    post:
      operationId: CreateSessionByTicket
      tags:
        - session
      summary: Initialize new session by ticket.
      description: |-
        Permissions: 
        * `get.parameter.*` - optional: adds _parameters_ to response.
        * Output: 
          * If body contains a computation request: `compute.output.*` - __required__.
          * If no computation request: `compute.output.*` - optional: adds _output for default
            parameter_ to response.
          * otherwise tries: `get.output.*` - optional: adds _output definitions_ to response.
        * Export:
          * Body contains an export request: `compute.export.*` - __required__.
          * No export request: `get.export.*` - optional: adds _export definitions_ to response.
      parameters:
        - name: ticketId
          in: path
          description: Encrypted ticket.
          required: true
          schema:
            $ref: "#/components/schemas/Base64Data"
        - name: modelStateId
          in: query
          description: ID of the Model-State to apply.
          required: false
          schema:
            type: string
        - name: strictValidation
          in: query
          description: |-
            When `false`, any Model-State parameter that cannot be applied to the model is ignored.
            However, when set to `true`, any validation error will result in an error response.

            Defaults to `false`.
          required: false
          schema:
            type: boolean
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqCustomizationOrExport"
      responses:
        201:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResCreateSessionByTicket"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security: []
  "/api/v2/session/{sessionId}/default":
    get:
      operationId: GetSessionDefaults
      tags:
        - session
      summary: >-
        Get session defaults (corresponds to the content of the session initialization request).
      description: |-
        Permissions: 
        * `get.parameter.*` - optional: adds _parameter defaults_ to response.
        * `get.export.*` - optional: adds _export definitions_ to response.
        * `compute.output.*` - optional: adds _outputs for default parameters_ to response.
        * `get.output.*` - optional: adds _output definitions_ to response.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetSessionDefaults"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/session/{sessionId}/close":
    post:
      operationId: CloseSession
      tags:
        - session
      summary: Close session.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResCloseSession"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/model/{modelId}/ticket":
    post:
      operationId: CreateTicket
      tags:
        - session
      summary: Create a new ticket that allows to initialize a new session.
      description: |-
        Subject-Restriction: __backend__.

        Permissions:  
        * `setting.auth.ticket.create.*` - __required__.
        * `setting.auth.ticket.get.*` - optional: adds _settings.auth.ticket_ to response.
        * `setting.auth.token.get.*` - optional: adds _settings.auth.token_ to response.
        * `setting.compute.get.*` - optional: adds _settings.compute_ to response.
        * `file.upload` - optional: adds _file.upload_ to response.
        * `file.download` - optional: adds _file.download_ to response.
        * `get.statistic.*` - optional: adds _statistic_ to response.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqTicket"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResCreateTicket"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/ticket/{ticketEncrypted}":
    get:
      operationId: DecryptTicket
      tags:
        - session
      summary: Decrypt the given ticket and return its details.
      description: |-
        Subject-Restriction: __backend__.

        Permissions: 
        * `setting.auth.ticket.decrypt.*` - __required__.
      parameters:
        - name: ticketEncrypted
          in: path
          description: Encrypted ShapeDiver ticket.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResDecryptTicket"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []

  #---------------------------------------------------------------------------#
  #- System                                                                  -#
  #---------------------------------------------------------------------------#
  "/api/v2/system/model/{modelId}":
    delete:
      operationId: EraseModel
      tags:
        - system
      summary: Delete model permanently.
      description: |-
        Subject-Restriction: __backend__.

        Permissions: 
        * `delete.hard` - __required__.
      parameters:
        - name: modelId
          in: path
          description: Model ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
      responses:
        202:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResDeleteModel"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
  "/api/v2/system/minions/info":
    get:
      operationId: GetMinionsInfo
      tags:
        - system
      summary: Get system information about the Geometry Minions.
      description: "Subject-Restriction: __backend__."
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetMinionsInfo"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
          CredentialsAuth: []
  "/api/v2/system/workers/info":
    get:
      operationId: GetWorkersInfo
      tags:
        - system
      summary: Get system information about the Geometry Workers.
      description: A __backend__ subject adds `system.plugins.inconsistent`.
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResGetWorkersInfo"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
          CredentialsAuth: []
  "/api/v2/system/sign/cdn/{endpoint}/{encodedUri}":
    get:
      operationId: CreateSignedUrl
      tags:
        - system
      summary: Create a signed URL for the specified endpoint and target.
      description: "Subject-Restriction: __backend__."
      parameters:
        - name: endpoint
          in: path
          description: CDN endpoint.
          required: true
          schema:
            type: string
        - name: encodedUri
          in: path
          description: Base64 encoded target URI.
          required: true
          schema:
            $ref: "#/components/schemas/Base64Data"
      responses:
        200:
          description: Success.
          content:
            text/plain:
              schema:
                type: string
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []

  #---------------------------------------------------------------------------#
  #- Texture                                                                 -#
  #---------------------------------------------------------------------------#
  "/api/v2/session/{sessionId}/texture/list":
    get:
      operationId: ListTextures
      tags:
        - texture
      summary: List model textures.
      description: |-
        Permissions: 
        * `cache.texture.list.*` - __required__.
      parameters:
        - name: sessionId
          in: path
          description: Session ID.
          required: true
          schema:
            $ref: "#/components/schemas/Uuid"
        - name: offset
          in: query
          description: Continuation token for pagination.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResListTextures"
        default:
          description: Unexpected error. See `message` for more details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResError"
      security:
        - JwtAuth: []
